#
# NuINu <don't@send.my>, 2019.
#
#. extracted from /home/bear/work/guile/doc/guile/en/libguile-linking.texi
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-07 12:37+0300\n"
"PO-Revision-Date: 2019-03-05 14:48+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:6
msgid ""
"@c -*-texinfo-*-\n"
"@c This is part of the GNU Guile Reference Manual.\n"
"@c Copyright (C)  1996, 1997, 2000, 2001, 2002, 2003, 2004, 2005, 2010, "
"2011\n"
"@c   Free Software Foundation, Inc.\n"
"@c See the file guile.texi for copying conditions."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:9
msgid ""
"@node Linking Programs With Guile\n"
"@section Linking Programs With Guile"
msgstr ""
"@node Linking Programs With Guile\n"
"@section Связывание программ с Guile"

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:12
msgid ""
"This section covers the mechanics of linking your program with Guile\n"
"on a typical POSIX system."
msgstr ""
"В этом разделе описывается механизм связывания вашей программы с Guile\n"
"на типичной POSIX системе."

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:18
msgid ""
"The header file @code{<libguile.h>} provides declarations for all of\n"
"Guile's functions and constants.  You should @code{#include} it at the\n"
"head of any C source file that uses identifiers described in this\n"
"manual.  Once you've compiled your source files, you need to link them\n"
"against the Guile object code library, @code{libguile}."
msgstr ""
"Заголовочный файл @code{<libguile.h>} содедржит объявления для всех функций\n"
"и констант Guile.  Вы должне его подключить @code{#include} в начале любого\n"
"исходного файла Си, который использует описанные в этом руководстве "
"идентификаторы.\n"
"После того как вы скомпилировали свои исходные файлы, вам нужно связать их "
"с\n"
"библиотекой объектного кода Guile, @code{libguile}."

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:23
msgid ""
"As noted in the previous section, @code{<libguile.h>} is not in the\n"
"default search path for headers.  The following command lines give\n"
"respectively the C compilation and link flags needed to build programs\n"
"using Guile @value{EFFECTIVE-VERSION}:"
msgstr ""
"Как отмечалось в предыдущем разделе, @code{<libguile.h>} не находиться\n"
"в пути поиска по умолчанию для заголовков. Следующие командные строки\n"
"дают соответствующие флаги компиляции Си и флаги для связывания необходимые\n"
"для создания программ с использованием Guile @value{EFFECTIVE-VERSION}:"

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:28
msgid ""
"@example\n"
"pkg-config guile-@value{EFFECTIVE-VERSION} --cflags\n"
"pkg-config guile-@value{EFFECTIVE-VERSION} --libs\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:33
msgid ""
"@menu\n"
"* Guile Initialization Functions::  What to call first.\n"
"* A Sample Guile Main Program::  Sources and makefiles.\n"
"@end menu"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:37
msgid ""
"@node Guile Initialization Functions\n"
"@subsection Guile Initialization Functions"
msgstr ""
"@node Guile Initialization Functions\n"
"@subsection Функции Инициализации Guile"

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:47
msgid ""
"To initialize Guile, you can use one of several functions.  The first,\n"
"@code{scm_with_guile}, is the most portable way to initialize Guile.  It\n"
"will initialize Guile when necessary and then call a function that you\n"
"can specify.  Multiple threads can call @code{scm_with_guile}\n"
"concurrently and it can also be called more than once in a given thread.\n"
"The global state of Guile will survive from one call of\n"
"@code{scm_with_guile} to the next.  Your function is called from within\n"
"@code{scm_with_guile} since the garbage collector of Guile needs to know\n"
"where the stack of each thread is."
msgstr ""
"Чтобы инициализировать Guile, вы можете использовать одну из нескольких\n"
"функций.  Первая, @code{scm_with_guile}, это самый переносимый способ\n"
"инициализации Guile, а затем функция, которую вы можете указать.\n"
"Много поточное приложение может вызвать @code{scm_with_guile}\n"
"одновременно и она может быть вызывана более одного раза в данном\n"
"потоке.\n"
"Глобальное состояние Guile будет выживать от одного вызова\n"
"@code{scm_with_guile} до следующего.  Ваша функция вызывается \n"
"изнутри @code{scm_with_guile} поскольку сборщик мусора в Guile\n"
"должен знать где здесь находиться стек каждой нити."

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:52
msgid ""
"A second function, @code{scm_init_guile}, initializes Guile for the\n"
"current thread.  When it returns, you can use the Guile API in the\n"
"current thread.  This function employs some non-portable magic to learn\n"
"about stack bounds and might thus not be available on all platforms."
msgstr ""
"Вторая функция, @code{scm_init_guile}, инициализирует Guile для текущего\n"
"потока.  Когда она возвращается, вы можете  использовать Guile API в "
"текущем\n"
"потоке.  Эта функция использует некую непереносимую магию, чтобы узнать о\n"
"границе стека и следовательно, может быть не доступна на всех платформах."

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:58
msgid ""
"One common way to use Guile is to write a set of C functions which\n"
"perform some useful task, make them callable from Scheme, and then link\n"
"the program with Guile.  This yields a Scheme interpreter just like\n"
"@code{guile}, but augmented with extra functions for some specific\n"
"application --- a special-purpose scripting language."
msgstr ""
"Одним из распространных способов использования Guile является написание\n"
"набора функций Си, которые выполняют несколько полезных задач, сделать их\n"
"вызываемыми из Scheme, а затем связать программу с Guile.  Это делает\n"
"интерпретатор Scheme как и @code{guile}, но дополненным дополнительными\n"
"функциями для некоторых конкретных приложений --- специализированного\n"
"языка сценариев."

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:63
msgid ""
"In this situation, the application should probably process its\n"
"command-line arguments in the same manner as the stock Guile\n"
"interpreter.  To make that straightforward, Guile provides the\n"
"@code{scm_boot_guile} and @code{scm_shell} function."
msgstr ""
"В этой ситуации приложение вероятно должно обрабатывать аргументы\n"
"командной строки, таким же образом какк стандартный интерпретатор Guile.\n"
"Чтобы сделать это просто,  Guile предоставляет функции\n"
"@code{scm_boot_guile} и @code{scm_shell}."

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:65
msgid "For more about these functions, see @ref{Initialization}."
msgstr "Подробнее об этих функциях, см @ref{Initialization}."

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:68
msgid ""
"@node A Sample Guile Main Program\n"
"@subsection A Sample Guile Main Program"
msgstr ""
"@node A Sample Guile Main Program\n"
"@subsection Пример Guile программы Main"

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:72
msgid ""
"Here is @file{simple-guile.c}, source code for a @code{main} and an\n"
"@code{inner_main} function that will produce a complete Guile\n"
"interpreter."
msgstr ""
"Вот @file{simple-guile.c}, исходный код для @code{main} и функции\n"
"@code{inner_main} которая будет создавать полный интерпретатор\n"
"Guile."

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:75
msgid ""
"@example\n"
"/* simple-guile.c --- Start Guile from C.  */"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:77
msgid "#include <libguile.h>"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:85
msgid ""
"static void\n"
"inner_main (void *closure, int argc, char **argv)\n"
"@{\n"
"  /* preparation */\n"
"  scm_shell (argc, argv);\n"
"  /* after exit */\n"
"@}"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:93
msgid ""
"int\n"
"main (int argc, char **argv)\n"
"@{\n"
"  scm_boot_guile (argc, argv, inner_main, 0);\n"
"  return 0; /* never reached, see inner_main */\n"
"@}\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:98
msgid ""
"The @code{main} function calls @code{scm_boot_guile} to initialize\n"
"Guile, passing it @code{inner_main}.  Once @code{scm_boot_guile} is\n"
"ready, it invokes @code{inner_main}, which calls @code{scm_shell} to\n"
"process the command-line arguments in the usual way."
msgstr ""
"Функция @code{main} вызывает @code{scm_boot_guile} для инициализации\n"
"Guile, передавая ей  @code{inner_main}.  Когда @code{scm_boot_guile}\n"
"будет готов, он вызывает @code{inner_main}, который вызывает "
"@code{scm_shell} для\n"
"обработки аргументов команднойо строки обычным способом."

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:100
msgid "@subsection Building the Example with Make"
msgstr "@subsection Сборка примера с помощью Make"

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:107
msgid ""
"Here is a Makefile which you can use to compile the example program.  It\n"
"uses @code{pkg-config} to learn about the necessary compiler and\n"
"linker flags.\n"
"@example\n"
"# Use GCC, if you have it installed.\n"
"CC=gcc"
msgstr ""
"Вот файл Makefile который вы можете использовать для компиляции примера\n"
"программы. Он использует @code{pkg-config} чтобы узнать о необходимых\n"
"флагах компиляции и связывания.\n"
"@example\n"
"# Use GCC, if you have it installed.\n"
"CC=gcc"

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:110
msgid ""
"# Tell the C compiler where to find <libguile.h>\n"
"CFLAGS=`pkg-config --cflags guile-@value{EFFECTIVE-VERSION}`"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:113
msgid ""
"# Tell the linker what libraries to use and where to find them.\n"
"LIBS=`pkg-config --libs guile-@value{EFFECTIVE-VERSION}`"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:116
msgid ""
"simple-guile: simple-guile.o\n"
"        $@{CC@} simple-guile.o $@{LIBS@} -o simple-guile"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:120
msgid ""
"simple-guile.o: simple-guile.c\n"
"        $@{CC@} -c $@{CFLAGS@} simple-guile.c\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:122
msgid "@subsection Building the Example with Autoconf"
msgstr "@subsection Сборка примера с использованием Autoconf"

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:131
msgid ""
"If you are using the GNU Autoconf package to make your application more\n"
"portable, Autoconf will settle many of the details in the Makefile\n"
"automatically, making it much simpler and more portable; we recommend\n"
"using Autoconf with Guile.  Here is a @file{configure.ac} file for\n"
"@code{simple-guile} that uses the standard @code{PKG_CHECK_MODULES}\n"
"macro to check for Guile.  Autoconf will process this file into a\n"
"@code{configure} script.  We recommend invoking Autoconf via the\n"
"@code{autoreconf} utility."
msgstr ""
"Если вы используете пакет GNU Autoconf, чтобы сделать ваше приложение\n"
"более переносимым, Autoconf автоматически установит многие детали в\n"
"в Makefile, делая его намного проще и переносимее; Мы рекомендуем\n"
"использовать Autoconf с Guile.  Вот файл @file{configure.ac} для\n"
"@code{simple-guile} который использует стандартный макрос "
"@code{PKG_CHECK_MODULES}\n"
"для проверки Guile.  Autoconf обработает этот файл в скрипте\n"
"@code{configure}.  Мы рекомендуем использовать вызов Autoconf через\n"
"утилиту @code{autoreconf}."

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:134
msgid ""
"@example\n"
"AC_INIT(simple-guile.c)"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:137
msgid ""
"# Find a C compiler.\n"
"AC_PROG_CC"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:140
msgid ""
"# Check for Guile\n"
"PKG_CHECK_MODULES([GUILE], [guile-@value{EFFECTIVE-VERSION}])"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:144
msgid ""
"# Generate a Makefile, based on the results.\n"
"AC_OUTPUT(Makefile)\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:146
msgid "Run @code{autoreconf -vif} to generate @code{configure}."
msgstr "Запускаем @code{autoreconf -vif} для создания @code{configure}."

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:154
msgid ""
"Here is a @code{Makefile.in} template, from which the @code{configure}\n"
"script produces a Makefile customized for the host system:\n"
"@example\n"
"# The configure script fills in these values.\n"
"CC=@@CC@@\n"
"CFLAGS=@@GUILE_CFLAGS@@\n"
"LIBS=@@GUILE_LIBS@@"
msgstr ""
"Вот шаблон @code{Makefile.in}, из которого скрипт @code{configure}\n"
"создаст Makefile настроеный на текущую машину:\n"
"@example\n"
"# The configure script fills in these values.\n"
"CC=@@CC@@\n"
"CFLAGS=@@GUILE_CFLAGS@@\n"
"LIBS=@@GUILE_LIBS@@"

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:160
msgid ""
"simple-guile: simple-guile.o\n"
"        $@{CC@} simple-guile.o $@{LIBS@} -o simple-guile\n"
"simple-guile.o: simple-guile.c\n"
"        $@{CC@} -c $@{CFLAGS@} simple-guile.c\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:165
msgid ""
"The developer should use Autoconf to generate the @file{configure}\n"
"script from the @file{configure.ac} template, and distribute\n"
"@file{configure} with the application.  Here's how a user might go about\n"
"building the application:"
msgstr ""
"Разработчик должен использовать Autoconf для генерации скрипта "
"@file{configure}\n"
"из шаблона @file{configure.ac}, и распространять\n"
"@file{configure} вместе с приложением.  Вот как пользователь может пойти "
"при\n"
"создании приложения:"

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:195
msgid ""
"@example\n"
"$ ls\n"
"Makefile.in     configure*      configure.ac    simple-guile.c\n"
"$ ./configure\n"
"checking for gcc... ccache gcc\n"
"checking whether the C compiler works... yes\n"
"checking for C compiler default output file name... a.out\n"
"checking for suffix of executables... \n"
"checking whether we are cross compiling... no\n"
"checking for suffix of object files... o\n"
"checking whether we are using the GNU C compiler... yes\n"
"checking whether ccache gcc accepts -g... yes\n"
"checking for ccache gcc option to accept ISO C89... none needed\n"
"checking for pkg-config... /usr/bin/pkg-config\n"
"checking pkg-config is at least version 0.9.0... yes\n"
"checking for GUILE... yes\n"
"configure: creating ./config.status\n"
"config.status: creating Makefile\n"
"$ make\n"
"[...]\n"
"$ ./simple-guile\n"
"guile> (+ 1 2 3)\n"
"6\n"
"guile> (getpwnam \"jimb\")\n"
"#(\"jimb\" \"83Z7d75W2tyJQ\" 4008 10 \"Jim Blandy\" \"/u/jimb\"\n"
"  \"/usr/local/bin/bash\")\n"
"guile> (exit)\n"
"$\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-linking.texi:199
msgid ""
"@c Local Variables:\n"
"@c TeX-master: \"guile.texi\"\n"
"@c End:"
msgstr ""
