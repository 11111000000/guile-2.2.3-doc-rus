@c -*-texinfo-*-
@c This is part of the GNU Guile Reference Manual.
@c Copyright (C)  1996, 1997, 2000, 2001, 2002, 2003, 2004, 2012, 2014
@c   Free Software Foundation, Inc.
@c See the file guile.texi for copying conditions.

@node Function Snarfing
@section Функция Snarfing

При написании кода Си для использования с Guile, вы обычно определяете
набор Си функций, а затем делаете некоторые из них видимыми для мира
Scheme вызывая @code{scm_c_define_gsubr} или связанные функции. Если
у вас много функций для публикации, иногда бывает достадно держать
список вызовов в  @code{scm_c_define_gsubr} в синхронизации со списком
определений функций.

Guile предоставляет программу @code{guile-snarf} для решения этой проблемы.
Используя этот инструмент, вы можете хранить всю информацию, необходимую
для определения функций наряду с определением самой функции; @code{guile-snarf}
будет извлекать эту инфромацию из вашего исходного кода и автоматически
сгенерирует файл вызовов @code{scm_c_define_gsubr} который вы можете включить
@code{#include} в функцию инициализации.

Механизм snarfing''а работает для многих видов действий по инициализации,
а не только для сбора вызовов @code{scm_c_define_gsubr}.  Полный список
того, что можно сделать см., @xref{Snarfing Macros}.

@cindex guile-snarf invocation
@cindex guile-snarf example

Программа @code{guile-snarf} вызывается следующим образом:

@smallexample
guile-snarf [-o @var{outfile}] [@var{cpp-args} ...]
@end smallexample

Эта команда будет извлекать операции инициализации в @var{outfile}.
Когда никакой внешний файл @var{outfile} не указан или когда
@var{outfile} является @code{-}, будет использоваться стандартный
вывод.  Препроцессор Си вызывается с  @var{cpp-args} (который обычно
включает входной файл) и выход фильтруется для извлечения операций
по инициализации.

Если во время обработки есть ошибки, @var{outfile} удаляется и программа
выходит с ненулевым статусом.

Во время snarfing''а, определяется препроцессорный макрос
@code{SCM_MAGIC_SNARFER}.  Вы можете использовать его, чтобы избежать
включения выходных файлов snarfer, которые еще не существуют, написав
код следующим образом:

@smallexample
#ifndef SCM_MAGIC_SNARFER
#include "foo.x"
#endif
@end smallexample

Вот как вы можете определить функцию Scheme @code{clear-image},
реализованную Си функцией @code{clear_image}:

@example
@group
#include <libguile.h>

SCM_DEFINE (clear_image, "clear-image", 1, 0, 0,
            (SCM image),
            "Clear the image.")
@{
  /* C code to clear the image in @code{image}... */
@}

void
init_image_type ()
@{
#include "image-type.x"
@}
@end group
@end example

Объявление @code{SCM_DEFINE} говорит, что функция Си @code{clear_image}
реализует функцию Scheme называемую @code{clear-image}, которая принимает
один требуемый аргумент (типа @code{SCM} и именуемый @code{image}), 
необязательный аргумент и завершающий аргумент. Строка @code{"Clear the image."} 
предоставляет короткий текст справки для функции, он называется @dfn{docstring}.

Макрос @code{SCM_DEFINE} также определяет статический массив символов,
инициализированной на Scheme имени функции.  В этом случае,
@code{s_clear_image} устанавливается в Си строку, "clear-image".  Вы
можете использовать этот символ при создании сообщений об ошибках.

Предполагая, что текст выше живет в файле с именем @file{image-type.c}, 
вам нужно будет выполнить следующую команду для подготовки этого файла
для компиляции:

@example
guile-snarf -o image-type.x image-type.c
@end example

Здесь сканируется файл @file{image-type.c} для объявления @code{SCM_DEFINE}
и записывается в выходной файл @file{image-type.x}:

@example
scm_c_define_gsubr ("clear-image", 1, 0, 0, (SCM (*)() ) clear_image);
@end example

При компиляции обычно, @code{SCM_DEFINE} представляет собой макрос, который
расширяется до заголовка функции @code{clear_image}.

Обратите внимание, что имя выходного файла соответствует @code{#include}
из входного файла. Кроме того, вам все еще необходимо предоставить всю ту
же информацию, которую вы бы использовали  для @code{scm_c_define_gsubr},
но вы можете разместить эту информацию рядом с определением функции, поэтому
она менее вероятно станет неправильной или устаревшей.

Если у вас есть много файлов, которые должна обрабаывать @code{guile-snarf}, 
вам следует рассмотреть возможность использования фрагмента в вашем Makefile:

@example
snarfcppopts = $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
.SUFFIXES: .x
.c.x:
	guile-snarf -o $@@ $< $(snarfcppopts)
@end example

Здесь говориться make запускать @code{guile-snarf} для создания каждого
необходимого файла @file{.x} из соответствующего файла @file{.c}.

Программа @code{guile-snarf} передает свои аргументы командной строки
непосредственно в препроцессор Си, который использует  их для извлечения
необходимой ему информации из исходного кода. это означает что вы можете
передать нормальные флаги компиляции для @code{guile-snarf}, чтобы определить
символы препроцессора, добавить заголовочные файлы и т.д.