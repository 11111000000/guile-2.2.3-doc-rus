#
# NuINu <don't@send.my>, 2019.
#
#. extracted from /home/bear/work/guile/doc/guile/en/libguile-extensions.texi
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-07 12:37+0300\n"
"PO-Revision-Date: 2019-03-06 10:00+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:6
msgid ""
"@c -*-texinfo-*-\n"
"@c This is part of the GNU Guile Reference Manual.\n"
"@c Copyright (C)  1996, 1997, 2000, 2001, 2002, 2003, 2004, 2005, 2006, "
"2011\n"
"@c   Free Software Foundation, Inc.\n"
"@c See the file guile.texi for copying conditions."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:9
msgid ""
"@node Linking Guile with Libraries\n"
"@section Linking Guile with Libraries"
msgstr ""
"@node Linking Guile with Libraries\n"
"@section Связывание Guile с Библиотеками"

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:16
msgid ""
"The previous section has briefly explained how to write programs that\n"
"make use of an embedded Guile interpreter.  But sometimes, all you\n"
"want to do is make new primitive procedures and data types available\n"
"to the Scheme programmer.  Writing a new version of @code{guile} is\n"
"inconvenient in this case and it would in fact make the life of the\n"
"users of your new features needlessly hard."
msgstr ""
"Предыдущий раздел кратко объяснил, как писать программы использующие\n"
"встроенный интерпретатор Guile.  Но иногда, все что вы хотите сделать,\n"
"это создать новую примитивную процедуру или тип данных доступным для\n"
"программиста Scheme.  Написание новой версии @code{guile} в этом случае\n"
"неудобно, и это сделает жизнь пользователей, вашей новой функции, без\n"
"необходимости, трудной."

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:31
msgid ""
"For example, suppose that there is a program @code{guile-db} that is a\n"
"version of Guile with additional features for accessing a database.\n"
"People who want to write Scheme programs that use these features would\n"
"have to use @code{guile-db} instead of the usual @code{guile} program.\n"
"Now suppose that there is also a program @code{guile-gtk} that extends\n"
"Guile with access to the popular Gtk+ toolkit for graphical user\n"
"interfaces.  People who want to write GUIs in Scheme would have to use\n"
"@code{guile-gtk}.  Now, what happens when you want to write a Scheme\n"
"application that uses a GUI to let the user access a database?  You\n"
"would have to write a @emph{third} program that incorporates both the\n"
"database stuff and the GUI stuff.  This might not be easy (because\n"
"@code{guile-gtk} might be a quite obscure program, say) and taking this\n"
"example further makes it easy to see that this approach can not work in\n"
"practice."
msgstr ""
"Например, предположим есть программа @code{guile-db} которая явлляется\n"
"версией Guile с дополнительной функцией доступа к базам данных.\n"
"Людям, которые хотят писать программы Scheme для использования этих\n"
"функций придеся использовать @code{guile-db} вместо обычной программы\n"
"@code{guile}. Теперь предположим, что есть также программа \n"
"@code{guile-gtk} которая расширяет Guile доступок к популярному\n"
"инструментарию Gtk+ для разработки графических интерфейсов.\n"
"Людям которые хотят писать GUI на Scheme придется использовать\n"
"@code{guile-gtk}.  Теперь, что произойдет когда вы захотите написать\n"
"приложение Scheme которое использует GUI чтобы предоставить пользователю\n"
"доступ к базе данных?  Вы должны были бы написать третью(@emph{third})\n"
"программу, которая включает в себя как базы данных, так и GUI.  Это\n"
"может быть не легко (поскольку, скажем, @code{guile-gtk} может быть "
"довольно\n"
"непонятной программой) и этот пример дополнительно позволяет легко увидеть, "
"что\n"
"этот подход не может работать на практике."

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:37
msgid ""
"It would have been much better if both the database features and the GUI\n"
"feature had been provided as libraries that can just be linked with\n"
"@code{guile}.  Guile makes it easy to do just this, and we encourage you\n"
"to make your extensions to Guile available as libraries whenever\n"
"possible."
msgstr ""
"Было бы намного лучше, если бы функции базы данных, и функции GUI\n"
"были предоставлены в виде библиотек которые можно просто подсоединить к\n"
"@code{guile}.  Guile позволяет легко сделать это, и мы рекомендуем вам\n"
"делать ваши расширения  Guile доступными в виде библиотек, всякий раз,\n"
"когда это возможно."

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:42
msgid ""
"You write the new primitive procedures and data types in the normal\n"
"fashion, and link them into a shared library instead of into a\n"
"stand-alone program.  The shared library can then be loaded dynamically\n"
"by Guile."
msgstr ""
"Вы пишите новые примитивные процедуры и типы данных обычным способом, и\n"
"связываете их в общую(разделяемую) библиотеку, а не в отдельную программу.\n"
"Общая библиотека может затем динамически загружаться с помощью Guile."

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:46
msgid ""
"@menu\n"
"* A Sample Guile Extension::\n"
"@end menu"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:50
msgid ""
"@node A Sample Guile Extension\n"
"@subsection A Sample Guile Extension"
msgstr ""
"@node A Sample Guile Extension\n"
"@subsection Пример Guile Расширения"

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:57
msgid ""
"This section explains how to make the Bessel functions of the C library\n"
"available to Scheme.  First we need to write the appropriate glue code\n"
"to convert the arguments and return values of the functions from Scheme\n"
"to C and back.  Additionally, we need a function that will add them to\n"
"the set of Guile primitives.  Because this is just an example, we will\n"
"only implement this for the @code{j0} function."
msgstr ""
"В этом разделе объясняется, как сделать функцию Bessel из библиотеки на Си\n"
"доступной в Scheme.  Сначала нам нужно написать склеивающий код  для\n"
"преобразования аргументов и  возвращаемых значений из Scheme в Си и "
"обратно.\n"
"Кроме того, нам нужна функция которая добавит наши функции к набору\n"
"примитивов Guile.  Поскольку это всего лишь пример, мы будем реализовывать\n"
"это только для функции @code{j0}."

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:59
msgid "Consider the following file @file{bessel.c}."
msgstr "Рассмотрим следующий файл @file{bessel.c}."

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:63
msgid ""
"@smallexample\n"
"#include <math.h>\n"
"#include <libguile.h>"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:69
msgid ""
"SCM\n"
"j0_wrapper (SCM x)\n"
"@{\n"
"  return scm_from_double (j0 (scm_to_double (x)));\n"
"@}"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:76
msgid ""
"void\n"
"init_bessel ()\n"
"@{\n"
"  scm_c_define_gsubr (\"j0\", 1, 0, 0, j0_wrapper);\n"
"@}\n"
"@end smallexample"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:79
msgid ""
"This C source file needs to be compiled into a shared library.  Here is\n"
"how to do it on GNU/Linux:"
msgstr ""
"Этот исходный Си файл необходимо скомпилировать в разделяемую библиотеку. "
"Вот как\n"
"это сделать на GNU/Linux:"

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:84
msgid ""
"@smallexample\n"
"gcc `pkg-config --cflags guile-@value{EFFECTIVE-VERSION}` \\\n"
"  -shared -o libguile-bessel.so -fPIC bessel.c\n"
"@end smallexample"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:87
msgid ""
"For creating shared libraries portably, we recommend the use of GNU\n"
"Libtool (@pxref{Top, , Introduction, libtool, GNU Libtool})."
msgstr ""
"Для создания переносимых разделяемых библиотек, мы рекомендуем использовать\n"
"GNU Libtool (@pxref{Top, , Introduction, libtool, GNU Libtool})."

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:97
msgid ""
"A shared library can be loaded into a running Guile process with the\n"
"function @code{load-extension}.  In addition to the name of the\n"
"library to load, this function also expects the name of a function from\n"
"that library that will be called to initialize it.  For our example,\n"
"we are going to call the function @code{init_bessel} which will make\n"
"@code{j0_wrapper} available to Scheme programs with the name\n"
"@code{j0}.  Note that we do not specify a filename extension such as\n"
"@file{.so} when invoking @code{load-extension}.  The right extension for\n"
"the host platform will be provided automatically."
msgstr ""
"Разделяемая библиотека может быть загружена в работающий процесс Guile\n"
"с помощью функции @code{load-extension}.  В дополнении к имени библиотеки\n"
"для загрузки, эта функция также ожидает имя функции из этой библиотеки,\n"
"которая будет вызвана для ее инициализации.  Для нашего примера,\n"
"мы собираемся вызвать функцию @code{init_bessel} которая сделает\n"
"@code{j0_wrapper} доступной для программ Scheme с именем\n"
"@code{j0}.  Обратите внимание, что мы не указываем расширение в имени "
"файла,\n"
"такое как @file{.so} при вызове @code{load-extension}.  Правильное "
"расширение\n"
"для базовой платформы будет предоставлено автоматически."

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:103
msgid ""
"@lisp\n"
"(load-extension \"libguile-bessel\" \"init_bessel\")\n"
"(j0 2)\n"
"@result{} 0.223890779141236\n"
"@end lisp"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:109
msgid ""
"For this to work, @code{load-extension} must be able to find\n"
"@file{libguile-bessel}, of course.  It will look in the places that\n"
"are usual for your operating system, and it will additionally look\n"
"into the directories listed in the @code{LTDL_LIBRARY_PATH}\n"
"environment variable."
msgstr ""
"Конечно, чтобы это работало, @code{load-extension} должно быть в состоянии\n"
"найти @file{libguile-bessel}.  Оно будет искать в тех местах, которые "
"являются\n"
"обчыными для вашей операционной системы, и будет дополнительно "
"просматривать\n"
"директории перечисленные в переменной среды @code{LTDL_LIBRARY_PATH}."

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:112
msgid ""
"To see how these Guile extensions via shared libraries relate to the\n"
"module system, @xref{Putting Extensions into Modules}."
msgstr ""
"Чтобы увидеть, как эти расширения Guile через разделяемые библиотеки "
"относятся\n"
"к модульной системе, смотрите, @xref{Putting Extensions into Modules}."

#: /home/bear/work/guile/doc/guile/en/libguile-extensions.texi:116
msgid ""
"@c Local Variables:\n"
"@c TeX-master: \"guile.texi\"\n"
"@c End:"
msgstr ""
