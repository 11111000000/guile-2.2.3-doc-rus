#
# Gagin <mikhail-gagin@yandex.ru>, 2018.
#
#. extracted from /home/bear/work/guile/doc/guile/en/history.texi
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-07 12:37+0300\n"
"PO-Revision-Date: 2018-05-08 08:24+0300\n"
"Last-Translator: Gagin <mikhail-gagin@yandex.ru>\n"
"Language-Team: Russian <mikhail-gagin@yandex.ru>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: /home/bear/work/guile/doc/guile/en/history.texi:6
msgid ""
"@c -*-texinfo-*-\n"
"@c This is part of the GNU Guile Reference Manual.\n"
"@c Copyright (C)  2008, 2010, 2011, 2013\n"
"@c   Free Software Foundation, Inc.\n"
"@c See the file guile.texi for copying conditions."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/history.texi:9
msgid ""
"@node History\n"
"@section A Brief History of Guile"
msgstr ""
"@node History\n"
"@section Краткая история Guile"

#: /home/bear/work/guile/doc/guile/en/history.texi:14
msgid ""
"Guile is an artifact of historical processes, both as code and as a\n"
"community of hackers. It is sometimes useful to know this history when\n"
"hacking the source code, to know about past decisions and future\n"
"directions."
msgstr ""
"Guile это артефакт исторических процессов, как кода, так и сообщества\n"
"хакеров.  Эту историю иногда полезно знать при изучении исходного кода,\n"
"знать о прошлых решениях и о будущих направлениях."

#: /home/bear/work/guile/doc/guile/en/history.texi:18
msgid ""
"Of course, the real history of Guile is written by the hackers hacking\n"
"and not the writers writing, so we round up the section with a note on\n"
"current status and future directions."
msgstr ""
"Конечно, настоящая история Guile пишется хакерами, а не писателями\n"
"поэтому мы завершаем раздел с описанием текущего статуса и будущих\n"
"направлений."

#: /home/bear/work/guile/doc/guile/en/history.texi:26
msgid ""
"@menu\n"
"* The Emacs Thesis::  \n"
"* Early Days::                  \n"
"* A Scheme of Many Maintainers::  \n"
"* A Timeline of Selected Guile Releases::  \n"
"* Status::\n"
"@end menu"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/history.texi:29
msgid ""
"@node The Emacs Thesis\n"
"@subsection The Emacs Thesis"
msgstr ""
"@node The Emacs Thesis\n"
"@subsection Тезисы Emacs"

#: /home/bear/work/guile/doc/guile/en/history.texi:32
msgid ""
"The story of Guile is the story of bringing the development experience\n"
"of Emacs to the mass of programs on a GNU system."
msgstr ""
"История Guile - это рассказа о том, как перенести опыт  Emacs\n"
"в развитие программ в системе GNU."

#: /home/bear/work/guile/doc/guile/en/history.texi:38
msgid ""
"Emacs, when it was first created in its GNU form in 1984, was a new\n"
"take on the problem of ``how to make a program''. The Emacs thesis is\n"
"that it is delightful to create composite programs based on an\n"
"orthogonal kernel written in a low-level language together with a\n"
"powerful, high-level extension language."
msgstr ""
"Emacs, когда он впервыпе был создан в форме GNU в 1984, стал новым\n"
"решением проблемы ``как сделать программу''. Тезис Emacs заключается\n"
"в том, что очень приятно создавать сложные программы на основе \n"
"ортогонального ядра, написанного на низкоуровневом языке, вместе с \n"
"мощным, высокоуровневым языком расширения."

#: /home/bear/work/guile/doc/guile/en/history.texi:43
msgid ""
"Extension languages foster extensible programs, programs which adapt\n"
"readily to different users and to changing times. Proof of this can be\n"
"seen in Emacs' current and continued existence, spanning more than a\n"
"quarter-century."
msgstr ""
"Язык Расширения способствует расширению программ, программ которые\n"
"легко адаптируются к различным пользователям и временным изменениям.\n"
"Доказательство этого можно увидеть в текущем  Emacs и продолжении\n"
"его существования, охватывающем более четверти века."

#: /home/bear/work/guile/doc/guile/en/history.texi:48
msgid ""
"Besides providing for modification of a program by others, extension\n"
"languages are good for @emph{intension} as well. Programs built in\n"
"``the Emacs way'' are pleasurable and easy for their authors to flesh\n"
"out with the features that they need."
msgstr ""
"Помимо предоставления модификации программы другими, язык расширения\n"
"хороши также для усиления. Программы, созданные в ``Emacs стиле'' \n"
"приятны и легки для их авторов, что бы понять, какие функции им нужны."

#: /home/bear/work/guile/doc/guile/en/history.texi:53
msgid ""
"After the Emacs experience was appreciated more widely, a number of\n"
"hackers started to consider how to spread this experience to the rest\n"
"of the GNU system. It was clear that the easiest way to Emacsify a\n"
"program would be to embed a shared language implementation into it."
msgstr ""
"После того как опыт Emacs был оценен более широко, ряд хакеров начали\n"
"рассмотрение вопроса, как распространить этот опыт на остальную часть\n"
"системы GNU. Было ясно, что самый простой способ  Emacsify(емаксировать)\n"
"программы - это внедрить в них реализацию общего языка."

#: /home/bear/work/guile/doc/guile/en/history.texi:56
msgid ""
"@node Early Days\n"
"@subsection Early Days"
msgstr ""
"@node Early Days\n"
"@subsection Первые Дни"

#: /home/bear/work/guile/doc/guile/en/history.texi:60
msgid ""
"Tom Lord was the first to fully concentrate his efforts on an\n"
"embeddable language runtime, which he named ``GEL'', the GNU Extension\n"
"Language."
msgstr ""
"Tom Lord был первым, кто полностью сконцентрировал свои усилия на внедрение\n"
"языка времени выполнения, который он назвал ``GEL'', языком расширения GNU."

#: /home/bear/work/guile/doc/guile/en/history.texi:64
msgid ""
"GEL was the product of converting SCM, Aubrey Jaffer's implementation\n"
"of Scheme, into something more appropriate to embedding as a library.\n"
"(SCM was itself based on an implementation by George Carrette, SIOD.)"
msgstr ""
"GEL был продуктом преобразования SCM, реализации Scheme Aubrey Jaffer,\n"
"в нечто более подходящее для внедрения в качестве библиотеки.\n"
"(Сам SCM базировался на реализации выполненной  George Carrette, SIOD.)"

#: /home/bear/work/guile/doc/guile/en/history.texi:71
msgid ""
"Lord managed to convince Richard Stallman to dub GEL the official\n"
"extension language for the GNU project. It was a natural fit, given\n"
"that Scheme was a cleaner, more modern Lisp than Emacs Lisp. Part of\n"
"the argument was that eventually when GEL became more capable, it\n"
"could gain the ability to execute other languages, especially Emacs\n"
"Lisp."
msgstr ""
"Lord удалось убедить Richard Stallman перевести GEL в статус\n"
"официального языка расширений для проекта GNU. Это было естественным\n"
"подходом, учитывая что Scheme был более чистым, более современным\n"
"Lisp чем Emacs Lisp. Часть аргументов заключалась в том, что в конечном\n"
"итоге, когда  GEL станет более мощным, он могбы научиться выполнять\n"
"программы на других языках, особенно  Emacs Lisp."

#: /home/bear/work/guile/doc/guile/en/history.texi:80
msgid ""
"Due to a naming conflict with another programming language, Jim Blandy\n"
"suggested a new name for GEL: ``Guile''. Besides being a recursive\n"
"acronym, ``Guile'' craftily follows the naming of its ancestors,\n"
"``Planner'', ``Conniver'', and ``Schemer''. (The latter was truncated\n"
"to ``Scheme'' due to a 6-character file name limit on an old operating\n"
"system.) Finally, ``Guile'' suggests ``guy-ell'', or ``Guy L.\n"
"Steele'', who, together with Gerald Sussman, originally discovered\n"
"Scheme."
msgstr ""
"Из-за конфликта имен с другим языком програмирования, Jim Blandy\n"
"предложил новое название для GEL: ``Guile''. Помимо рекурсивного\n"
"акронима, ``Guile'' хитрое следование имен его предков,\n"
"``Planner'', ``Conniver'', и ``Schemer''. (Последний был усечен до\n"
" ``Scheme'' из-за ограничений длины имени файлов в 6-символов на\n"
"старой операционной системе.) Наконец, ``Guile'' созвучен ``guy-ell'',\n"
"или ``Guy L. Steele'', который вместе с Gerald Sussman, первоначально\n"
"создали схему."

#: /home/bear/work/guile/doc/guile/en/history.texi:87
msgid ""
"Around the same time that Guile (then GEL) was readying itself for\n"
"public release, another extension language was gaining in popularity,\n"
"Tcl. Many developers found advantages in Tcl because of its shell-like\n"
"syntax and its well-developed graphical widgets library, Tk. Also, at\n"
"the time there was a large marketing push promoting Tcl as a\n"
"``universal extension language''."
msgstr ""
"Примерно в тоже время, когда Guile (GEL) готовился к публичному выпуску,\n"
"другой язык расширения набирал популярность,Tcl. Многие разработчики\n"
"нашли преимущества в Tcl из-за его shell-подобного синтаксиса и его\n"
"хорошо развитой библиотеки графических виджетов, Tk. Кроме того, в то\n"
"время был большой маркетинговый толчок, представлявший Tcl как \n"
"``универсальный язык расширений''."

#: /home/bear/work/guile/doc/guile/en/history.texi:95
msgid ""
"Richard Stallman, as the primary author of GNU Emacs, had a particular\n"
"vision of what extension languages should be, and Tcl did not seem to\n"
"him to be as capable as Emacs Lisp. He posted a criticism to the\n"
"comp.lang.tcl newsgroup, sparking one of the internet's legendary\n"
"flamewars. As part of these discussions, retrospectively dubbed the\n"
"``Tcl Wars'', he announced the Free Software Foundation's intent to\n"
"promote Guile as the extension language for the GNU project."
msgstr ""
"Richard Stallman, как главный автор GNU Emacs, имел особое виденье\n"
"какие языки расширения должны быть, и  Tcl не казался ему столь же\n"
"способным как Emacs Lisp. Он отправил критику в группу новостей \n"
"comp.lang.tcl, вызвав одну из легендарных интернет дискуссий. \n"
"В части эти рассуждения окрестили как ``Tcl Войны'', он объявил\n"
"о намерении фонда СПО продвигать Guile как язык расширений для\n"
"проекта GNU."

#: /home/bear/work/guile/doc/guile/en/history.texi:103
msgid ""
"It is a common misconception that Guile was created as a reaction to\n"
"Tcl. While it is true that the public announcement of Guile happened\n"
"at the same time as the ``Tcl wars'', Guile was created out of a\n"
"condition that existed outside the polemic. Indeed, the need for a\n"
"powerful language to bridge the gap between extension of existing\n"
"applications and a more fully dynamic programming environment is still\n"
"with us today."
msgstr ""
"Это распространенное заблуждение, что Guile был создан как реакция на\n"
"Tcl. Хотя это правда, что публичное объявление Guile произошло одновременно\n"
"с  ``Tcl войнами'', Guile был создан из условий которые существовали вне\n"
"полемики. Действительно, требование необходимости наличия мощного языка,\n"
"что бы преодолеть разрыв между расширением существующих приложений и\n"
"динамической средой программирования, по прежнему остается с нами и сегодня."

#: /home/bear/work/guile/doc/guile/en/history.texi:106
msgid ""
"@node A Scheme of Many Maintainers\n"
"@subsection A Scheme of Many Maintainers"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/history.texi:112
msgid ""
"Surveying the field, it seems that Scheme implementations correspond\n"
"with their maintainers on an N-to-1 relationship. That is to say, that\n"
"those people that implement Schemes might do so on a number of\n"
"occasions, but that the lifetime of a given Scheme is tied to the\n"
"maintainership of one individual."
msgstr ""
"Обследовав поле, кажеться, что число реализаций Scheme соответствует\n"
"числу их сопровождаеющих maintainers в отношении N-to-1. То есть, те \n"
"люди которые реализуют Schemes, могут делать это несколько раз, но \n"
"время жизни данной Scheme связано с сопровождением одного человека."

#: /home/bear/work/guile/doc/guile/en/history.texi:114
msgid "Guile is atypical in this regard."
msgstr "В этом отношении Guile не типично."

#: /home/bear/work/guile/doc/guile/en/history.texi:122
msgid ""
"Tom Lord maintained Guile for its first year and a half or so,\n"
"corresponding to the end of 1994 through the middle of 1996. The\n"
"releases made in this time constitute an arc from SCM as a standalone\n"
"program to Guile as a reusable, embeddable library, but passing\n"
"through a explosion of features: embedded Tcl and Tk, a toolchain for\n"
"compiling and disassembling Java, addition of a C-like syntax,\n"
"creation of a module system, and a start at a rich POSIX interface."
msgstr ""
"Tom Lord поддерживал Guile в течении первых полутора лет или около\n"
"того, что соответствует концу 1994 года до середины 1996. Выпуски,\n"
"сделанные за это время, составляют дугу от SCM к Guile как автономной\n"
"программе, переиспользуемой, внедряемой библиотеки, но проходящей\n"
"через взрыв характеристик: встроенные  Tcl и Tk, инструментальная\n"
"цепочка для дизассемблирования Java, добавление Си подобного синтаксиса,\n"
"создания модульной системы и запуска богатого интерфейса POSIX."

#: /home/bear/work/guile/doc/guile/en/history.texi:130
msgid ""
"Only some of those features remain in Guile. There were ongoing\n"
"tensions between providing a small, embeddable language, and one which\n"
"had all of the features (e.g.@: a graphical toolkit) that a modern Emacs\n"
"might need. In the end, as Guile gained in uptake, the development\n"
"team decided to focus on depth, documentation and orthogonality rather\n"
"than on breadth. This has been the focus of Guile ever since, although\n"
"there is a wide range of third-party libraries for Guile."
msgstr ""
"Только некоторые из этих функций остались в Guile. Постоянное напряжение\n"
"между предоставлением небольшого вложенного языка, и того, который имеет\n"
"все функции(например графический инструментарий), что может понадобиться\n"
"современному Emacs. В конце концов, по мере того как Guile формировалась,\n"
"команда разработчиков решила сосредоточится на глубине, документации и\n"
"ортогональности, чем на широте. С тех пор это было в центре внимания Guile,\n"
"хотя существует широкий диапазон библиотек для Guile."

#: /home/bear/work/guile/doc/guile/en/history.texi:139
msgid ""
"Jim Blandy presided over that period of stabilization, in the three\n"
"years until the end of 1999, when he too moved on to other projects.\n"
"Since then, Guile has had a group maintainership. The first group was\n"
"Maciej Stachowiak, Mikael Djurfeldt, and Marius Vollmer, with Vollmer\n"
"staying on the longest. By late 2007, Vollmer had mostly moved on to\n"
"other things, so Neil Jerram and Ludovic Court@`es\n"
"stepped up to take on the primary maintenance responsibility. Jerram and\n"
"Court@`es were joined by Andy Wingo in late 2009."
msgstr ""
"Джим Бленди председательствовал на этот период стабилизации, за три года,\n"
"до конца 1999 года, когда он тоже перешел к другим проектам. С тех пор\n"
"у Guile была группа сопровождающих. Первой группой были Мацей Стаховак,\n"
"Микаэль Джульфельд и Мариус Фоллмер, с Воллмером, остающимся надолго.\n"
"К концу 2007 года Фолмер в основном перешел к другим вещам, поэтому Нейл\n"
"Джеррам и Людовик Курт взяли на себя основную ответственность за \n"
"сопровождение. В конце 2009 года к Джерри и Курту присоединился Энди\n"
"Винго."

#: /home/bear/work/guile/doc/guile/en/history.texi:143
msgid ""
"Of course, a large part of the actual work on Guile has come from\n"
"other contributors too numerous to mention, but without whom the world\n"
"would be a poorer place."
msgstr ""
"Конечно, значительная часть фактической работы с Guile исходит от\n"
"других участников которых слишком много, чтобы упомянуть, но без \n"
"которых мир был бы беднее."

#: /home/bear/work/guile/doc/guile/en/history.texi:146
msgid ""
"@node A Timeline of Selected Guile Releases\n"
"@subsection A Timeline of Selected Guile Releases"
msgstr ""
"@node A Timeline of Selected Guile Releases\n"
"@subsection Временная шкала выпусков Guile"

#: /home/bear/work/guile/doc/guile/en/history.texi:150
msgid ""
"@table @asis\n"
"@item guile-i --- 4 February 1995\n"
"SCM, turned into a library."
msgstr ""
"@table @asis\n"
"@item guile-i --- 4 February 1995\n"
"SCM, превратился в библиотеку."

#: /home/bear/work/guile/doc/guile/en/history.texi:155
msgid ""
"@item guile-ii --- 6 April 1995\n"
"A low-level module system was added. Tcl/Tk support was added,\n"
"allowing extension of Scheme by Tcl or vice versa. POSIX support was\n"
"improved, and there was an experimental stab at Java integration."
msgstr ""
"@item guile-ii --- 6 April 1995\n"
"Была добавлена низкоуровневая модульная система. Добавлена поддержка Tcl/"
"Tk,\n"
"позволяющая расширение Scheme через Tcl и наоборот. Поддержка POSIX была \n"
"улучешна, и была предпринята эксперементальная попытка интеграции с Java."

#: /home/bear/work/guile/doc/guile/en/history.texi:159
msgid ""
"@item guile-iii --- 18 August 1995\n"
"The C-like syntax, ctax, was improved, but mostly this release\n"
"featured a start at the task of breaking Guile into pieces."
msgstr ""
"@item guile-iii --- 18 August 1995\n"
"Си-подобный синткасис был улучшен, но в основном этот выпуск\n"
"обозначил начало разбиения Guile на части."

#: /home/bear/work/guile/doc/guile/en/history.texi:166
msgid ""
"@item 1.0 --- 5 January 1997\n"
"@code{#f} was distinguished from @code{'()}. User-level, cooperative\n"
"multi-threading was added. Source-level debugging became more useful,\n"
"and programmer's and user's manuals were begun. The module system\n"
"gained a high-level interface, which is still used today in more or\n"
"less the same form."
msgstr ""
"@item 1.0 --- 5 January 1997\n"
"@code{#f} теперь отличается от @code{'()}. Добавлена многопоточность \n"
"на уровне пользователя. Отладка исходного кода стала более удобной,\n"
"было начато написание руководства для программистов и пользователей.\n"
"Модульная система получила интерфейс высокого уровня, который до сих \n"
"пор в более менее неизменной форме."

#: /home/bear/work/guile/doc/guile/en/history.texi:174
msgid ""
"@item 1.1 --- 16 May 1997\n"
"@itemx 1.2 --- 24 June 1997\n"
"Support for Tcl/Tk and ctax were split off as separate packages, and\n"
"have remained there since. Guile became more compatible with SCSH, and\n"
"more useful as a UNIX scripting language. Libguile could now be built as\n"
"a shared library, and third-party extensions written in C became\n"
"loadable via dynamic linking."
msgstr ""
"@item 1.1 --- 16 May 1997\n"
"@itemx 1.2 --- 24 June 1997\n"
"Поддержка Tcl/Tk и ctax была разделена по отдельным пакетам и с тех пор\n"
"остается там. Guile стал более совместимым с SCSH, и стал более полезным\n"
"как язык сценариев UNIX. Теперь Libguile может быть построена как общая\n"
"библиотека и сторонние расширения, написанные на Си, могут загружаться\n"
"через динамическую линковку."

#: /home/bear/work/guile/doc/guile/en/history.texi:182
msgid ""
"@item 1.3.0 --- 19 October 1998\n"
"Command-line editing became much more pleasant through the use of the\n"
"readline library. The initial support for internationalization via\n"
"multi-byte strings was removed; 10 years were to pass before proper\n"
"internationalization would land again. Initial Emacs Lisp support\n"
"landed, ports gained better support for file descriptors, and fluids\n"
"were added."
msgstr ""
"@item 1.3.0 --- 19 October 1998\n"
"Редактирование командной строки стало намного приятнее благодаря\n"
"использованию библиотеки readline. Первоначальная поддержка \n"
"интернационализацииThe с помощью многобайтовых строк была удалена;\n"
"Прошло 10 лет, прежде чем надлежащая интернационализация вернулась.\n"
"Начата поддержка Emacs Lisp, порты получили лучшую поддержку для\n"
"файловых дескрипторов, и добавлены fluids."

#: /home/bear/work/guile/doc/guile/en/history.texi:191
msgid ""
"@item 1.3.2 --- 20 August 1999\n"
"@itemx 1.3.4 --- 25 September 1999\n"
"@itemx 1.4 --- 21 June 2000\n"
"A long list of lispy features were added: hooks, Common Lisp's\n"
"@code{format}, optional and keyword procedure arguments,\n"
"@code{getopt-long}, sorting, random numbers, and many other fixes and\n"
"enhancements. Guile also gained an interactive debugger, interactive\n"
"help, and better backtraces."
msgstr ""
"@item 1.3.2 --- 20 August 1999\n"
"@itemx 1.3.4 --- 25 September 1999\n"
"@itemx 1.4 --- 21 June 2000\n"
"Добавлен длинный список лисповых реализаций: hooks, Common Lisp's\n"
"@code{format}, необязательные и ключевые слова в аргументах процедур,\n"
"@code{getopt-long}, сортировка, случайные числа, и много других изменений\n"
"и улучшений. Guile также получил интерактивный дебагер, интерактивную\n"
"справку и трассировщик."

#: /home/bear/work/guile/doc/guile/en/history.texi:197
msgid ""
"@item 1.6 --- 6 September 2002\n"
"Guile gained support for the R5RS standard, and added a number of SRFI\n"
"modules. The module system was expanded with programmatic support for\n"
"identifier selection and renaming. The GOOPS object system was merged\n"
"into Guile core."
msgstr ""
"@item 1.6 --- 6 September 2002\n"
"Guile получила поддержку стандарта R5RS, и добавила ряд модулей SRFI.\n"
"Модульная ситема была расширена программной продержкой для\n"
"выбора и переименования индентификаторов. Объектная система GOOPS\n"
"была объединена с ядром Guile."

#: /home/bear/work/guile/doc/guile/en/history.texi:204
msgid ""
"@item 1.8 --- 20 February 2006\n"
"Guile's arbitrary-precision arithmetic switched to use the GMP\n"
"library, and added support for exact rationals. Guile's embedded\n"
"user-space threading was removed in favor of POSIX pre-emptive\n"
"threads, providing true multiprocessing. Gettext support was added,\n"
"and Guile's C API was cleaned up and orthogonalized in a massive way."
msgstr ""
"@item 1.8 --- 20 February 2006\n"
"Guile переключилась на использование библиотеки GMP в расчетах\n"
"арифметики произвольной точности и добавлена поддержка\n"
"точных рациональных чисел. Встраивание  пользовательского пространства\n"
"Guile было удалено в пользу упреждающих потоков POSIX, обеспечивающих\n"
"истинную много процессорность. Добавлена поддержка Gettext,\n"
"и  Guile Си интерфейс API был очищен и ортогонализирован."

#: /home/bear/work/guile/doc/guile/en/history.texi:214
msgid ""
"@item 2.0 --- 16 February 2010\n"
"A virtual machine was added to Guile, along with the associated compiler\n"
"and toolchain. Support for internationalization was finally\n"
"reimplemented, in terms of unicode, locales, and libunistring. Running\n"
"Guile instances became controllable and debuggable from within Emacs,\n"
"via Geiser. Guile caught up to features found in a number of other\n"
"Schemes: SRFI-18 threads, module-hygienic macros, a profiler, tracer,\n"
"and debugger, SSAX XML integration, bytevectors, a dynamic FFI,\n"
"delimited continuations, module versions, and partial support for R6RS."
msgstr ""
"@item 2.0 --- 16 February 2010\n"
"Виртуальная машина была добавлена в Guile, вместе с соотвествующим\n"
"компилятором и набором утилит. Впоследствии поддержка интернационализации\n"
" была вновь реализована в терминах unicode, locales, и libunistring. Запуск\n"
"экземпляров Guile стал управляемым и отлаживаемый из Emacs через Geiser. \n"
"Guile добавил функции обнаруженные в других Schemes: SRFI-18 потоки, \n"
"module-hygienic macros, профайлер, трассировщик, отладчик, \n"
"интеграция SSAX XML, байтовые вектора, и динамический FFI,\n"
"delimited continuations, версии модулей, и частичная поддержка R6RS."

#: /home/bear/work/guile/doc/guile/en/history.texi:222
msgid ""
"@item 2.2 --- mid-2014\n"
"The virtual machine and introduced in 2.0 was completely rewritten,\n"
"along with much of the compiler and toolchain.  This speeds up many\n"
"Guile programs as well as reducing startup time and memory usage.  A PEG\n"
"parser toolkit was added, making it easier to write other language\n"
"frontends.\n"
"@end table"
msgstr ""
"@item 2.2 --- mid-2014\n"
"Виртуальная машина, введенная в версии 2.0 была полностью переписана\n"
"вместе с большей частью копилятора и набора утилит.  Это ускорило многие\n"
"программы Guile, а также сократило время запуска и использование памяти.\n"
"Инструментарий анализатора PEG был добавлен, что упростило работу с другими\n"
"языковыми интерфейсами.\n"
"@end table"

#: /home/bear/work/guile/doc/guile/en/history.texi:225
msgid ""
"@node Status\n"
"@subsection Status, or: Your Help Needed"
msgstr ""
"@node Status\n"
"@subsection Состояние, или: Необходима Ваша Помощь."

#: /home/bear/work/guile/doc/guile/en/history.texi:228
msgid ""
"Guile has achieved much of what it set out to achieve, but there is\n"
"much remaining to do."
msgstr "Guile добилась многого, но многое еще предстоит сделать."

#: /home/bear/work/guile/doc/guile/en/history.texi:233
msgid ""
"There is still the old problem of bringing existing applications into\n"
"a more Emacs-like experience. Guile has had some successes in this\n"
"respect, but still most applications in the GNU system are without\n"
"Guile integration."
msgstr ""
"Есть еще старая проблема приведения существующих приложений в более\n"
"подобные  Emacs опыту. В этом отношении у Guile были некоторые успехи,\n"
"но все же, большинство приложений в системе GNU находятся без интеграции\n"
"с Guile."

#: /home/bear/work/guile/doc/guile/en/history.texi:241
msgid ""
"Getting Guile to those applications takes an investment, the\n"
"``hacktivation energy'' needed to wire Guile into a program that only\n"
"pays off once it is good enough to enable new kinds of behavior. This\n"
"would be a great way for new hackers to contribute: take an\n"
"application that you use and that you know well, think of something\n"
"that it can't yet do, and figure out a way to integrate Guile and\n"
"implement that task in Guile."
msgstr ""
"Внедрение  Guile в эти приложения требует инвестиций ``хакерской энергии''\n"
"для подключение Guile к программе, которая рассчитывается только тогда,\n"
"когда она уже достаточно хороша, чтобы внедрить в нее новые виды поведения.\n"
"Это было бы отличным способом для новых хакеров: приложение которое вы \n"
"испльзуете, и которое вы хорошо знаете, придумать что оно еще не может\n"
"сделать и выяснить способ интеграции с Guile и реализовать эту задачу\n"
"в Guile."

#: /home/bear/work/guile/doc/guile/en/history.texi:249
msgid ""
"With time, perhaps this exposure can reverse itself, whereby programs\n"
"can run under Guile instead of vice versa, eventually resulting in the\n"
"Emacsification of the entire GNU system. Indeed, this is the reason\n"
"for the naming of the many Guile modules that live in the @code{ice-9}\n"
"namespace, a nod to the fictional substance in Kurt Vonnegut's\n"
"novel, Cat's Cradle, capable of acting as a seed crystal to\n"
"crystallize the mass of software."
msgstr ""
"Со временем, возможно, эта экспозиция может перевернуть сама себя,\n"
"в результате чего программы смогут работать под Guile, что в конечном\n"
"итоге приведет к Емаксификации(Emacsification) всей системы GNU. \n"
"В самом деле, это причина для обозначения многих модулей Guile, которые\n"
"живут в пространстве имен @code{ice-9}, как реверанс к вымышленной\n"
"субстанции Льда из новел Kurt Vonnegut, \"Колыбель кошки\", способной\n"
"действовать в качестве затравочного кристала для кристализации массы\n"
"программного обеспечения."

#: /home/bear/work/guile/doc/guile/en/history.texi:256
msgid ""
"Implicit to this whole discussion is the idea that dynamic languages\n"
"are somehow better than languages like C. While languages like C have\n"
"their place, Guile's take on this question is that yes, Scheme is more\n"
"expressive than C, and more fun to write. This realization carries an\n"
"imperative with it to write as much code in Scheme as possible rather\n"
"than in other languages."
msgstr ""
"Неявной для всего этого обсуждения является идея о том, что динамические\n"
"языки как-то лучше чем такие языки как Си. Хотя такие языки как Си, \n"
"имеют свое место. Guile отвечает на этот вопрос - да, Scheme более \n"
"выразительна чем Си, и на ней более интересно писать. Эта реализация\n"
"несет в себе обязательство писать как можно больше кода на  Scheme, не на\n"
"других языках."

#: /home/bear/work/guile/doc/guile/en/history.texi:267
msgid ""
"These days it is possible to write extensible applications almost\n"
"entirely from high-level languages, through byte-code and native\n"
"compilation, speed gains in the underlying hardware, and foreign call\n"
"interfaces in the high-level language.  Smalltalk systems are like this,\n"
"as are Common Lisp-based systems.  While there already are a number of\n"
"pure-Guile applications out there, users still need to drop down to C\n"
"for some tasks: interfacing to system libraries that don't have prebuilt\n"
"Guile interfaces, and for some tasks requiring high performance.  Native\n"
"ahead-of-time compilation, planned for Guile 3.0, should help with\n"
"this."
msgstr ""
"В наши дни можно писать расширяемые приложения почти полностью из языков\n"
"высокого уровня, через байт-код и собственную компиляцию, обеспчивающих \n"
"прирост скорости выполнения в базовых аппратных и внешних интерфейсах \n"
"вызовов высокоуровневых языков. Сисетмы Smalltalk похожи на это, как и \n"
"обычные системы на основе  Common Lisp.  Хотя еще существует ряд \n"
"чистокровных приложений там, где пользователям по-прежнему необходимо \n"
"опускаться до Си для выполнения некоторых задач: сопряжения системных \n"
"библиотек, у которых нет готовых интерфейсов к Guile, и для некоторых \n"
"задач, требующих высокого  быстродействия. Нативная компиляция времени \n"
"выполнения запланирована для Guile 3.0, должна помочь в этом."

#: /home/bear/work/guile/doc/guile/en/history.texi:273
msgid ""
"Still, even with an all-Guile application, sometimes you want to\n"
"provide an opportunity for users to extend your program from a\n"
"language with a syntax that is closer to C, or to Python. Another\n"
"interesting idea to consider is compiling e.g.@: Python to Guile. It's\n"
"not that far-fetched of an idea: see for example IronPython or JRuby."
msgstr ""
"Тем, не менее при использовании приложения все-в-Guile, иногда\n"
"вы хотите предоставить возможность для пользователей, чтобы расширить\n"
"вашу программу языком, синтаксисом который ближе к Си или Python.\n"
"Еще одна интересная идея, которую стоит рассмотреть, заключается в\n"
"компиляци, например Python в Guile. Это не надуманная идея:\n"
"см. например  IronPython или JRuby."

#: /home/bear/work/guile/doc/guile/en/history.texi:280
msgid ""
"And then there's Emacs itself.  Guile's Emacs Lisp support has reached\n"
"an excellent level of correctness, robustness, and speed.  However there\n"
"is still work to do to finish its integration into Emacs itself.  This\n"
"will give lots of exciting things to Emacs: native threads, a real\n"
"object system, more sophisticated types, cleaner syntax, and access to\n"
"all of the Guile extensions."
msgstr ""
"И тогда есть Emacs. Поддержка Guile Emacs Lisp достигла отличного уровня\n"
"правильности, надежности и скорости. Однако попрежнему предстоит сделать \n"
"работу, чтобы закончить интеграцию в Emacs. Это даст много интересного\n"
"Emacs: родные(для архитектуры процессора) потоки, реальную объектную "
"систему,\n"
"более сложные типы данных, более чистый синтаксис и доступ ко всем Guile\n"
"расширениям."

#: /home/bear/work/guile/doc/guile/en/history.texi:287
msgid ""
"Finally, there is another axis of crystallization, the axis between\n"
"different Scheme implementations. Guile does not yet support the latest\n"
"Scheme standard, R7RS, and should do so. Like all standards, R7RS is\n"
"imperfect, but supporting it will allow more code to run on Guile\n"
"without modification, and will allow Guile hackers to produce code\n"
"compatible with other schemes. Help in this regard would be much\n"
"appreciated."
msgstr ""
"Наконец, существует еще одна ось кристализации, ось между различными\n"
"реализациями Scheme. Guile еще не поддерживает последний стандарт\n"
"Scheme, R7RS, и должен еще это реализовать. Как и все стандарты, \n"
"R7RS является несовершенным, но его поддержка позволит большему коду\n"
"работать на Guile без изменений и позволит хакерам Guile создавать\n"
"код, совместимый с другими версиями scheme. Помощь в этом отношении\n"
"будет высоко оценена."
