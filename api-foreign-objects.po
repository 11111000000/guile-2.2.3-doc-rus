#
# Gagin <mikhail-gagin@yandex.ru>, 2018.
#
#. extracted from /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-07 12:36+0300\n"
"PO-Revision-Date: 2018-07-06 13:55+0300\n"
"Last-Translator: Gagin <mikhail-gagin@yandex.ru>\n"
"Language-Team: Russian <mikhail-gagin@yandex.ru>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:6
msgid ""
"@c -*-texinfo-*-\n"
"@c This is part of the GNU Guile Reference Manual.\n"
"@c Copyright (C)  1996, 1997, 2000, 2001, 2002, 2003, 2004, 2009, 2013, "
"2014\n"
"@c   Free Software Foundation, Inc.\n"
"@c See the file guile.texi for copying conditions."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:9
msgid ""
"@node Foreign Objects\n"
"@section Foreign Objects"
msgstr ""
"@node Foreign Objects\n"
"@section Внешние Объекты"

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:11
msgid "@cindex foreign object"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:15
msgid ""
"This chapter contains reference information related to defining and\n"
"working with foreign objects.  @xref{Defining New Foreign Object Types},\n"
"for a tutorial-like introduction to foreign objects."
msgstr ""
"В этой главе содержижться справочная информация, касающаяся определения\n"
"и работы с внешниии объектами(foreign object). См. @xref{Defining New "
"Foreign Object Types},\n"
"для обучения создания и работы с внешними объектами."

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:20
msgid ""
"@deftp {C Type} scm_t_struct_finalize\n"
"This function type returns @code{void} and takes one @code{SCM}\n"
"argument.\n"
"@end deftp"
msgstr ""
"@deftp {C Type} scm_t_struct_finalize\n"
"Этот тип функции возвращает @code{void} и принимает один @code{SCM}\n"
"аргумент.\n"
"@end deftp"

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:27
msgid ""
"@deftypefn {C Function} SCM scm_make_foreign_object_type (SCM name, SCM "
"slots, scm_t_struct_finalize finalizer)\n"
"Create a fresh foreign object type.  @var{name} is a symbol naming the\n"
"type.  @var{slots} is a list of symbols, each one naming a field in the\n"
"foreign object type.  @var{finalizer} indicates the finalizer, and may\n"
"be @code{NULL}.\n"
"@end deftypefn"
msgstr ""
"@deftypefn {C Function} SCM scm_make_foreign_object_type (SCM name, SCM "
"slots, scm_t_struct_finalize finalizer)\n"
"Создает новый тип внешнего объекта.  @var{name} это символ, именующий этот\n"
"тип.  @var{slots} это список символов, каждый из которых именует поле в "
"типе\n"
"внешнего объекта.  @var{finalizer} указывает финализатор, и может быть\n"
"be @code{NULL}.\n"
"@end deftypefn"

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:30
msgid ""
"@cindex finalizer\n"
"@cindex finalization"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:38
msgid ""
"We recommend that finalizers be avoided if possible.  @xref{Foreign\n"
"Object Memory Management}.  Finalizers must be async-safe and\n"
"thread-safe.  Again, @pxref{Foreign Object Memory Management}.  If you\n"
"are embedding Guile in an application that is not thread-safe, and you\n"
"define foreign object types that need finalization, you might want to\n"
"disable automatic finalization, and arrange to call\n"
"@code{scm_manually_run_finalizers ()} yourself."
msgstr ""
"Мы рекомендуем, по возможности избегать финализаторов.  @xref{Foreign\n"
"Object Memory Management}.  Финализаторы должны быть асинхронно-безопасными\n"
"и потоко-безопасными.  Еще раз, @pxref{Foreign Object Memory Management}. "
"Если\n"
"вы внедряете Guile в приложение, которое не является потоко-безопасным, и "
"вы\n"
"определяете типы внешних объектов котрым требуется финализация, вы можете\n"
"отключить автоматическую финализацию и организвать вызов\n"
"@code{scm_manually_run_finalizers ()}."

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:46
msgid ""
"@deftypefn {C Function} int scm_set_automatic_finalization_enabled (int "
"enabled_p)\n"
"Enable or disable automatic finalization.  By default, Guile arranges to\n"
"invoke object finalizers automatically, in a separate thread if\n"
"possible.  Passing a zero value for @var{enabled_p} will disable\n"
"automatic finalization for Guile as a whole.  If you disable automatic\n"
"finalization, you will have to call @code{scm_run_finalizers ()}\n"
"periodically."
msgstr ""
"@deftypefn {C Function} int scm_set_automatic_finalization_enabled (int "
"enabled_p)\n"
"Включение или отключение автоматической финализации.  По умолчанию, Guile "
"организует\n"
"вызов финализатора объекта автоматически, в отдельном потоке если это "
"возможно.\n"
"Передача нулевого значения для @var{enabled_p} отключает автоматическую\n"
"финализацию для Guile в целом. Если вы отключите автоматическую фиализацию, "
"вам\n"
"придется вызывать переодически @code{scm_run_finalizers ()}."

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:50
msgid ""
"Unlike most other Guile functions, you can call\n"
"@code{scm_set_automatic_finalization_enabled} before Guile has been\n"
"initialized."
msgstr ""
"В отличии от большинства других функций Guile, вы можете вызывать\n"
"@code{scm_set_automatic_finalization_enabled} до того как Guile\n"
"был инициализирован."

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:53
msgid ""
"Return the previous status of automatic finalization.\n"
"@end deftypefn"
msgstr ""
"Возвращает предыдущий стату автоматической финализации.\n"
"@end deftypefn"

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:60
msgid ""
"@deftypefn {C Function} int scm_run_finalizers (void)\n"
"Invoke any pending finalizers.  Returns the number of finalizers that\n"
"were invoked.  This function should be called when automatic\n"
"finalization is disabled, though it may be called if it is enabled as\n"
"well.\n"
"@end deftypefn"
msgstr ""
"@deftypefn {C Function} int scm_run_finalizers (void)\n"
"Вызывает любые ожидающие завершения финализаторы.  Возвращает количество\n"
"фигнализаторов, которые были вызваны. Эта функция должна вызываться, когда\n"
"автоматическая финализация отключена, хотя она может вызываться и \n"
"когда она включена.\n"
"@end deftypefn"

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:65
msgid ""
"@deftypefn {C Function} void scm_assert_foreign_object_type (SCM type, SCM "
"val)\n"
"When @var{val} is a foreign object of the given @var{type}, do nothing.\n"
"Otherwise, signal an error.\n"
"@end deftypefn"
msgstr ""
"@deftypefn {C Function} void scm_assert_foreign_object_type (SCM type, SCM "
"val)\n"
"Когда @var{val} является внешним объектом заданного типа @var{type}, ничего "
"не делает.\n"
"Иначе, сообщает об ошибке.\n"
"@end deftypefn"

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:73
msgid ""
"@deftypefn {C Function} SCM scm_make_foreign_object_0 (SCM type)\n"
"@deftypefnx {C Function} SCM scm_make_foreign_object_1 (SCM type, void "
"*val0)\n"
"@deftypefnx {C Function} SCM scm_make_foreign_object_2 (SCM type, void "
"*val0, void *val1)\n"
"@deftypefnx {C Function} SCM scm_make_foreign_object_3 (SCM type, void "
"*val0, void *val1, void *val2)\n"
"@deftypefnx {C Function} SCM scm_make_foreign_object_n (SCM type, size_t n, "
"void *vals[])\n"
"Make a new foreign object of the type with type @var{type} and\n"
"initialize the first @var{n} fields to the given values, as appropriate."
msgstr ""
"@deftypefn {C Function} SCM scm_make_foreign_object_0 (SCM type)\n"
"@deftypefnx {C Function} SCM scm_make_foreign_object_1 (SCM type, void "
"*val0)\n"
"@deftypefnx {C Function} SCM scm_make_foreign_object_2 (SCM type, void "
"*val0, void *val1)\n"
"@deftypefnx {C Function} SCM scm_make_foreign_object_3 (SCM type, void "
"*val0, void *val1, void *val2)\n"
"@deftypefnx {C Function} SCM scm_make_foreign_object_n (SCM type, size_t n, "
"void *vals[])\n"
"Создает новый внешний объект с типом @var{type} и инициализирует первые "
"@var{n}\n"
"полей указанными значениями, в зависимости от ситуации.\n"

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:81
msgid ""
"The number of fields for objects of a given type is fixed when the type\n"
"is created.  It is an error to give more initializers than there are\n"
"fields in the value.  It is perfectly fine to give fewer initializers\n"
"than needed; this is convenient when some fields are of non-pointer\n"
"types, and would be easier to initialize with the setters described\n"
"below.\n"
"@end deftypefn"
msgstr ""
"Число полей для объектов данного типа фиксируется при создании типа.\n"
"Это ошибка если инициализаторов больше, чем полей в значении.\n"
"Это отлично - дать меньше инициализаторов, чем необходимо;\n"
"это удобно, когда некоторые поля являются не являются указателями,\n"
"и их легче инициализировать с помощью установщиков(setters) описанных\n"
"ниже.\n"
"@end deftypefn"

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:90
msgid ""
"@deftypefn {C Function} void* scm_foreign_object_ref (SCM obj, size_t n);\n"
"@deftypefnx {C Function} scm_t_bits scm_foreign_object_unsigned_ref (SCM "
"obj, size_t n);\n"
"@deftypefnx {C Function} scm_t_signed_bits scm_foreign_object_signed_ref "
"(SCM obj, size_t n);\n"
"Return the value of the @var{n}th field of the foreign object @var{obj}.\n"
"The backing store for the fields is as wide as a @code{scm_t_bits}\n"
"value, which is at least as wide as a pointer.  The different variants\n"
"handle casting in a portable way.\n"
"@end deftypefn"
msgstr ""
"@deftypefn {C Function} void* scm_foreign_object_ref (SCM obj, size_t n);\n"
"@deftypefnx {C Function} scm_t_bits scm_foreign_object_unsigned_ref (SCM "
"obj, size_t n);\n"
"@deftypefnx {C Function} scm_t_signed_bits scm_foreign_object_signed_ref "
"(SCM obj, size_t n);\n"
"Возвращает значение @var{n}го поля во внешнем объекте @var{obj}.\n"
"Хранилище для хранения поля имеют ту же ширину что и значение "
"@code{scm_t_bits}\n"
"которое по меньшей мере равно ширине указателя. Различные варианты выбора "
"указателя переносимым\n"
"способом.\n"
"@end deftypefn"

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:98
msgid ""
"@deftypefn {C Function} void scm_foreign_object_set_x (SCM obj, size_t n, "
"void *val);\n"
"@deftypefnx {C Function} void scm_foreign_object_unsigned_set_x (SCM obj, "
"size_t n, scm_t_bits val);\n"
"@deftypefnx {C Function} void scm_foreign_object_signed_set_x (SCM obj, "
"size_t n, scm_t_signed_bits val);\n"
"Set the value of the @var{n}th field of the foreign object @var{obj} to\n"
"@var{val}, after portably converting to a @code{scm_t_bits} value, if\n"
"needed.\n"
"@end deftypefn"
msgstr ""
"@deftypefn {C Function} void scm_foreign_object_set_x (SCM obj, size_t n, "
"void *val);\n"
"@deftypefnx {C Function} void scm_foreign_object_unsigned_set_x (SCM obj, "
"size_t n, scm_t_bits val);\n"
"@deftypefnx {C Function} void scm_foreign_object_signed_set_x (SCM obj, "
"size_t n, scm_t_signed_bits val);\n"
"Устанавливает значение the @var{n}-го поля во внешнем объекте  @var{obj} "
"значением\n"
"@var{val}, после возможного преобразование в значение @code{scm_t_bits}, "
"если необходимо.\n"
"@end deftypefn"

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:101
msgid ""
"One can also access foreign objects from Scheme.  @xref{Foreign Objects\n"
"and Scheme}, for some examples."
msgstr ""
"Можно также получить доступ к внешним объектам из Scheme.  @xref{Foreign "
"Objects\n"
"and Scheme}, для некоторых примеров."

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:105
msgid ""
"@example\n"
"(use-modules (system foreign-object))\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:111
msgid ""
"@deffn {Scheme Procedure} make-foreign-object-type name slots [#:"
"finalizer=#f]\n"
"Make a new foreign object type.  See the above documentation for\n"
"@code{scm_make_foreign_object_type}; these functions are exactly\n"
"equivalent, except for the way in which the finalizer gets attached to\n"
"instances (an internal detail)."
msgstr ""
"@deffn {Scheme Procedure} make-foreign-object-type name slots [#:"
"finalizer=#f]\n"
"Создает новый тип внешнего объекта.  Смотри документацию выше для\n"
"@code{scm_make_foreign_object_type}; эти функции в точности эквивавлентны, "
"за\n"
"исключением того что финализатор подсоединяется к экземплярам (внутренняя "
"деталь)."

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:115
msgid ""
"The resulting value is a GOOPS class.  @xref{GOOPS}, for more on classes\n"
"in Guile.\n"
"@end deffn"
msgstr ""
"Получаемое значение это GOOPS класс.  @xref{GOOPS}, для получения "
"дополнительной\n"
"информации о классах в Guile.\n"
"@end deffn"

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:122
msgid ""
"@deffn {Scheme Syntax} define-foreign-object-type name constructor "
"(slot ...) [#:finalizer=#f]\n"
"A convenience macro to define a type, using\n"
"@code{make-foreign-object-type}, and bind it to @var{name}.  A\n"
"constructor will be bound to @var{constructor}, and getters will be\n"
"bound to each of @var{slot...}.\n"
"@end deffn"
msgstr ""
"@deffn {Scheme Syntax} define-foreign-object-type name constructor "
"(slot ...) [#:finalizer=#f]\n"
"Удобный макрос для определения типа, используя\n"
"@code{make-foreign-object-type}, и связывае его с @var{name}.  Констурктор\n"
"будет связан с  @var{constructor}, и функции получения значений(getters) \n"
"будут связаны для каждого слота @var{slot...}.\n"
"@end deffn"

#: /home/bear/work/guile/doc/guile/en/api-foreign-objects.texi:125
msgid ""
"@c Local Variables:\n"
"@c TeX-master: \"guile.texi\"\n"
"@c End:"
msgstr ""
