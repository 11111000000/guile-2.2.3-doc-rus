#
# NuINu <don't@send.my>, 2019.
#
#. extracted from /home/bear/work/guile/doc/guile/en/guile-invoke.texi
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-07 12:37+0300\n"
"PO-Revision-Date: 2019-02-26 12:22+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:6
msgid ""
"@c -*-texinfo-*-\n"
"@c This is part of the GNU Guile Reference Manual.\n"
"@c Copyright (C)  1996, 1997, 2000-2005, 2010, 2011, 2013, 2014,\n"
"@c   2016 Free Software Foundation, Inc.\n"
"@c See the file guile.texi for copying conditions."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:10
msgid ""
"@node Invoking Guile\n"
"@section Invoking Guile\n"
"@cindex invocation"
msgstr ""
"@node Invoking Guile\n"
"@section Вызов Guile\n"
"@cindex invocation"

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:14
msgid ""
"Many features of Guile depend on and can be changed by information that\n"
"the user provides either before or when Guile is started.  Below is a\n"
"description of what information to provide and how to provide it."
msgstr ""
"Многие функции Guile зависят и могут быть изменены информацией, которую "
"предоставляет\n"
"пользователь либо до, либо во время запуска Guile.  Ниже приводиться "
"описание того,\n"
"какую информацию предоставлять и как это сделать."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:19
msgid ""
"@menu\n"
"* Command-line Options::        Command-line options understood by Guile.\n"
"* Environment Variables::       Variables that affect Guile's behavior.\n"
"@end menu"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:29
msgid ""
"@node Command-line Options\n"
"@subsection Command-line Options\n"
"@cindex Command-line Options\n"
"@cindex command-line arguments\n"
"@cindex arguments (command line)\n"
"@cindex options (command line)\n"
"@cindex switches (command line)\n"
"@cindex startup (command-line arguments)\n"
"@cindex invocation (command-line arguments)"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:33
msgid ""
"Here we describe Guile's command-line processing in detail.  Guile\n"
"processes its arguments from left to right, recognizing the switches\n"
"described below.  For examples, see @ref{Scripting Examples}."
msgstr ""
"Здесь мы подробно опишем обработку командной строки Guile.  Guile\n"
"обрабатываепт свои аргументы слева на право, распознавая переключатели\n"
"описаные ниже.  Например, см @ref{Scripting Examples}."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:35
msgid "@table @code"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:43
msgid ""
"@item @var{script} @var{arg...}\n"
"@itemx -s @var{script} @var{arg...}\n"
"@cindex script mode\n"
"By default, Guile will read a file named on the command line as a\n"
"script.  Any command-line arguments @var{arg...} following @var{script}\n"
"become the script's arguments; the @code{command-line} function returns\n"
"a list of strings of the form @code{(@var{script} @var{arg...})}."
msgstr ""
"@item @var{script} @var{arg...}\n"
"@itemx -s @var{script} @var{arg...}\n"
"@cindex script mode\n"
"По умолчанию, Guile будет читать файл с именем в командной строке как "
"скрипт.\n"
"Любые аргументы командной строки @var{arg...} следующие за @var{script}\n"
"становяться аргументами скрипта; функция @code{command-line} возвращает "
"список\n"
"строк вида @code{(@var{script} @var{arg...})}."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:47
msgid ""
"It is possible to name a file using a leading hyphen, for example,\n"
"@file{-myfile.scm}.  In this case, the file name must be preceded by\n"
"@option{-s} to tell Guile that a (script) file is being named."
msgstr ""
"Возможно называть файла используя начальный дефис, например,\n"
"@file{-myfile.scm}.  Этом случае имени файла должна предшествовать\n"
"@option{-s} чтобы соообщить Guile что файл (скрипт) имеет такое название."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:50
msgid ""
"Scripts are read and evaluated as Scheme source code just as the\n"
"@code{load} function would.  After loading @var{script}, Guile exits."
msgstr ""
"Скрипты читаются и выполняются как исходный код Scheme так же как если бы\n"
"использовалась функция @code{load}.  После выполнения загруженного скрипта \n"
"@var{script}, Guile завершает работу."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:58
msgid ""
"@item -c @var{expr} @var{arg...}\n"
"@cindex evaluate expression, command-line argument\n"
"Evaluate @var{expr} as Scheme code, and then exit.  Any command-line\n"
"arguments @var{arg...} following @var{expr} become command-line\n"
"arguments; the @code{command-line} function returns a list of strings of\n"
"the form @code{(@var{guile} @var{arg...})}, where @var{guile} is the\n"
"path of the Guile executable."
msgstr ""
"@item -c @var{expr} @var{arg...}\n"
"@cindex evaluate expression, command-line argument\n"
"Вычисляет @var{expr} как код Scheme, и завершает работу.  Любые аргументы\n"
"командной строки @var{arg...} следующие за @var{expr} становяться "
"аргументами\n"
"командной строки; функция @code{command-line} возвращает список строк вида\n"
"@code{(@var{guile} @var{arg...})}, где @var{guile} это путь исполняемого "
"файла\n"
"Guile."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:66
msgid ""
"@item -- @var{arg...}\n"
"Run interactively, prompting the user for expressions and evaluating\n"
"them.  Any command-line arguments @var{arg...} following the @option{--}\n"
"become command-line arguments for the interactive session; the\n"
"@code{command-line} function returns a list of strings of the form\n"
"@code{(@var{guile} @var{arg...})}, where @var{guile} is the path of the\n"
"Guile executable."
msgstr ""
"@item -- @var{arg...}\n"
"Запускается в интерактивном режиме, выдавая пользователю приглашение для \n"
"ввода выражений и вычисляя их. Любые аргументы командной строки\n"
" @var{arg...} следующие за @option{--} становяться аргументами командной\n"
"строки для интерактивного сеанса; функция @code{command-line} возвращает \n"
"список строк вида @code{(@var{guile} @var{arg...})}, где @var{guile} это\n"
"путь к исполняемому файлу Guile."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:73
msgid ""
"@item -L @var{directory}\n"
"Add @var{directory} to the front of Guile's module load path.  The given\n"
"directories are searched in the order given on the command line and\n"
"before any directories in the @env{GUILE_LOAD_PATH} environment\n"
"variable.  Paths added here are @emph{not} in effect during execution of\n"
"the user's @file{.guile} file."
msgstr ""
"@item -L @var{directory}\n"
"Добавляет @var{directory} в начало пути загрузки Guile.  Данные каталоги\n"
"используютя для поиска в порядке, указанном в командной строке и перед\n"
"любыми каталогами из переменной среды @env{GUILE_LOAD_PATH}.  Пути,\n"
"добавленные здесь, не оказывают эффекта во время исполнения "
"пользовательского\n"
"файла @file{.guile}."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:76
msgid ""
"@item -C @var{directory}\n"
"Like @option{-L}, but adjusts the load path for @emph{compiled} files."
msgstr ""
"@item -C @var{directory}\n"
"Подобно @option{-L}, но корректирует путь загрузки для "
"скомпилированных(@emph{compiled}) файлов."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:83
msgid ""
"@item -x @var{extension}\n"
"Add @var{extension} to the front of Guile's load extension list\n"
"(@pxref{Load Paths, @code{%load-extensions}}).  The specified extensions\n"
"are tried in the order given on the command line, and before the default\n"
"load extensions.  Extensions added here are @emph{not} in effect during\n"
"execution of the user's @file{.guile} file."
msgstr ""
"@item -x @var{extension}\n"
"Добавляет расришения @var{extension} в начало списка загружаемых расширений "
"Guile\n"
"(@pxref{Load Paths, @code{%load-extensions}}).  Указанные расширения "
"пробуются в\n"
"порядке указанном в командной строке, и до расширений загружаемых по "
"умолчанию.\n"
"Добавленные здесь расширения не действуют во время выполнения "
"пользовательского файла\n"
"@file{.guile}."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:87
msgid ""
"@item -l @var{file}\n"
"Load Scheme source code from @var{file}, and continue processing the\n"
"command line."
msgstr ""
"@item -l @var{file}\n"
"Загружает исходный код Scheme из @var{file}, и продолжает обработку "
"командной\n"
"строки."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:94
msgid ""
"@item -e @var{function}\n"
"Make @var{function} the @dfn{entry point} of the script.  After loading\n"
"the script file (with @option{-s}) or evaluating the expression (with\n"
"@option{-c}), apply @var{function} to a list containing the program name\n"
"and the command-line arguments---the list provided by the\n"
"@code{command-line} function."
msgstr ""
"@item -e @var{function}\n"
"Делает функцию @var{function}  @dfn{точкой входа} скрипта.  После загрузки\n"
"файла скрипта (с @option{-s}) или  вычисляя выражение (с @option{-c}), \n"
"применяет функцию @var{function} к списку, содержащему имя программы и\n"
"аргументы командной строки ---списку предоставляемому функцией \n"
"@code{command-line}."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:99
msgid ""
"A @option{-e} switch can appear anywhere in the argument list, but Guile\n"
"always invokes the @var{function} as the @emph{last} action it performs.\n"
"This is weird, but because of the way script invocation works under\n"
"POSIX, the @option{-s} option must always come last in the list."
msgstr ""
"Клюя @option{-e} может появиться в любом месте списка аргументов, но Guile\n"
"всегда вызывает функцию @var{function} как @emph{последнее} действие которое "
"она\n"
"выполняет. Это странно, но так как вызов скрипта работает в POSIX, опция "
"@option{-s}\n"
"всегда должна быть последней в списке."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:104
msgid ""
"The @var{function} is most often a simple symbol that names a function\n"
"that is defined in the script.  It can also be of the form @code{(@@\n"
"@var{module-name} @var{symbol})}, and in that case, the symbol is\n"
"looked up in the module named @var{module-name}."
msgstr ""
"Функция @var{function} чаще всего является простым символом, котоырй "
"именует\n"
"определенную функцию в скрипте.  Он также может иметь форму @code{(@@\n"
"@var{module-name} @var{symbol})}, и в этом случае символ ищется в модуле с \n"
"именем @var{module-name}."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:110
msgid ""
"As a shorthand you can use the form @code{(symbol ...)}, that is, a list\n"
"of only symbols that doesn't start with @code{@@}.  It is equivalent to\n"
"@code{(@@ @var{module-name} main)}, where @var{module-name} is\n"
"@code{(symbol ...)} form.  @xref{Using Guile Modules} and @ref{Scripting\n"
"Examples}."
msgstr ""
"В качестве сокращения вы можете использовать форму @code{(symbol ...)}, то "
"есть\n"
"списко, только символы, котолого не начинаются с @code{@@}.  Это "
"эквивалентно\n"
"@code{(@@ @var{module-name} main)}, где @var{module-name} имеет вид\n"
"@code{(symbol ...)}.  @xref{Using Guile Modules} и @ref{Scripting\n"
"Examples}."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:114
msgid ""
"@item -ds\n"
"Treat a final @option{-s} option as if it occurred at this point in the\n"
"command line; load the script here."
msgstr ""
"@item -ds\n"
"Обрабатывает последний параметр @option{-s} как если бы она была в этой "
"точке командной строки;\n"
"загружая скрипт здесь."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:120
msgid ""
"This switch is necessary because, although the POSIX script invocation\n"
"mechanism effectively requires the @option{-s} option to appear last, the\n"
"programmer may well want to run the script before other actions\n"
"requested on the command line.  For examples, see @ref{Scripting\n"
"Examples}."
msgstr ""
"Этот переключатель необходим, потому что, хотя механизм вызова сценария\n"
"POSIX эффективно требует, чтобы опция @option{-s} появлялась последней,\n"
"программисту может потребоваться запустить скрипт перед другими действиями,\n"
"запрошенными в командной строке.  Пример, см. @ref{Scripting\n"
"Examples}."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:124
msgid ""
"@item \\\n"
"Read more command-line arguments, starting from the second line of the\n"
"script file.  @xref{The Meta Switch}."
msgstr ""
"@item \\\n"
"Читать больше аргументов командной строки, начиная со второй строки файла "
"скрипта.\n"
"@xref{The Meta Switch}."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:132
msgid ""
"@item --use-srfi=@var{list}\n"
"@cindex loading srfi modules (command line)\n"
"The option @option{--use-srfi} expects a comma-separated list of numbers,\n"
"each representing a SRFI module to be loaded into the interpreter\n"
"before evaluating a script file or starting the REPL.  Additionally,\n"
"the feature identifier for the loaded SRFIs is recognized by\n"
"the procedure @code{cond-expand} when this option is used."
msgstr ""
"@item --use-srfi=@var{list}\n"
"@cindex loading srfi modules (command line)\n"
"Опция @option{--use-srfi} ожидает разделенный запятыми список чисел,\n"
"какждое из которых представляет модуль SRFI для загрузки в интерпретатор\n"
"перед выполнением файла скрипта или запуска REPL.  Кроме того,\n"
"идентификаторы функции для загружаемых SRFIs распознаются процедурой\n"
"@code{cond-expand} когда эта опция используется."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:135
msgid ""
"Here is an example that loads the modules SRFI-8 ('receive') and SRFI-13\n"
"('string library') before the GUILE interpreter is started:"
msgstr ""
"Вот пример, который загружает модули SRFI-8 ('receive') и SRFI-13\n"
"('string library') перед запуском интерпретатора GUILE:"

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:139
msgid ""
"@example\n"
"guile --use-srfi=8,13\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:147
msgid ""
"@item --debug\n"
"@cindex debugging virtual machine (command line)\n"
"Start with the debugging virtual machine (VM) engine.  Using the\n"
"debugging VM will enable support for VM hooks, which are needed for\n"
"tracing, breakpoints, and accurate call counts when profiling.  The\n"
"debugging VM is slower than the regular VM, though, by about ten\n"
"percent.  @xref{VM Hooks}, for more information."
msgstr ""
"@item --debug\n"
"@cindex debugging virtual machine (command line)\n"
"Стартует guile с отладочной виртуальной машиной (VM).  Использование\n"
"отладочной VM включает поддержку хуков(hooks) VM, которые необходимы для\n"
"трассировки, устновки точек прерывания, и точного подсчета количества \n"
"вызовов при профилировании.  Отладочная VM, медленнее обычной VM, "
"приблизительно\n"
"на десять процентов.  @xref{VM Hooks}, для получения дополнительной "
"информации."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:151
msgid ""
"By default, the debugging VM engine is only used when entering an\n"
"interactive session.  When executing a script with @option{-s} or\n"
"@option{-c}, the normal, faster VM is used by default."
msgstr ""
"По умолчанию, движок отладочной виртуальной машины VM используется \n"
"только при входе в интерактивную сессию. При выполнении сценария с\n"
"@option{-s} или @option{-c}, исползуется обычная, более быстрая\n"
"виртуальная машина VM по умолчанию."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:157
msgid ""
"@vnew{1.8}\n"
"@item --no-debug\n"
"@cindex debugging virtual machine (command line)\n"
"Do not use the debugging VM engine, even when entering an interactive\n"
"session."
msgstr ""
"@vnew{1.8}\n"
"@item --no-debug\n"
"@cindex debugging virtual machine (command line)\n"
"Не использовать движок отладочной VM, даже при входе в интерактивный сеанс."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:163
msgid ""
"Note that, despite the name, Guile running with @option{--no-debug}\n"
"@emph{does} support the usual debugging facilities, such as printing a\n"
"detailed backtrace upon error.  The only difference with\n"
"@option{--debug} is lack of support for VM hooks and the facilities that\n"
"build upon it (see above)."
msgstr ""
"Обратите внимание, что несмотря на название, Guile рабтающая с опцией "
"@option{--no-debug}\n"
"@emph{дает} поддержку обычным средствам отладки, таким как распечатка "
"подробной трассировки\n"
"при ошибке.  Единственное отличие от @option{--debug} отсутствие поддержки "
"VM hooks и\n"
"средств которые опираются на них (см выше)."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:170
msgid ""
"@item -q\n"
"@cindex init file, not loading\n"
"@cindex @file{.guile} file, not loading\n"
"Do not load the initialization file, @file{.guile}.  This option only\n"
"has an effect when running interactively; running scripts does not load\n"
"the @file{.guile} file.  @xref{Init File}."
msgstr ""
"@item -q\n"
"@cindex init file, not loading\n"
"@cindex @file{.guile} file, not loading\n"
"Не загружать файл инициализации @file{.guile}.  Эта опция влияет только при\n"
"работе в интерактивном режиме; Запуск скриптов не загружает файл  @file{."
"guile}.\n"
"@xref{Init File}."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:176
msgid ""
"@item --listen[=@var{p}]\n"
"While this program runs, listen on a local port or a path for REPL\n"
"clients.  If @var{p} starts with a number, it is assumed to be a local\n"
"port on which to listen.  If it starts with a forward slash, it is\n"
"assumed to be the file name of a UNIX domain socket on which to listen."
msgstr ""
"@item --listen[=@var{p}]\n"
"Во время работы программы, прослушивает локальный порт или путь для\n"
"клиентов REPL.  Если @var{p} начинается с числа, предполагается, что это\n"
"локальный порт для прослушивания. Если он начинается с прямой косой "
"черты(слеша),\n"
"предполагается, что это имя файла домена UNIX сокетов для прослушивания."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:182
msgid ""
"If @var{p} is not given, the default is local port 37146.  If you look\n"
"at it upside down, it almost spells ``Guile''.  If you have netcat\n"
"installed, you should be able to @kbd{nc localhost 37146} and get a\n"
"Guile prompt.  Alternately you can fire up Emacs and connect to the\n"
"process; see @ref{Using Guile in Emacs} for more details."
msgstr ""
"Если @var{p} не задано, по умолчанию используется локальный порт 37146.\n"
"Если вы посмотрите на него перевернув, это будет почти ``Guile''.  \n"
"Если у вас установлен netcat, вы имеете возможность дать команду \n"
"@kbd{nc localhost 37146} и получить приглашение Guile.  После чего,\n"
"вы можете запустить Emacs и подсоединиться к процессу; см.\n"
" @ref{Using Guile in Emacs} для получения подробной информации."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:189
msgid ""
"@quotation Note\n"
"Opening a port allows anyone who can connect to that port to do anything\n"
"Guile can do, as the user\n"
"that the Guile process is running as.  Do not use @option{--listen} on\n"
"multi-user machines.  Of course, if you do not pass @option{--listen} to\n"
"Guile, no port will be opened."
msgstr ""
"@quotation Примечание\n"
"Открытие порта позволяет любому, кто может подключиться к этому порту, "
"делать все,\n"
"что может делать Guile, как пользователь запустивший процесс\n"
"Guile.  Не используйте опцию @option{--listen} на многопользовательских "
"машинах.\n"
"Конечно, если вы не передаете @option{--listen} в Guile, порт не будет "
"открыт."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:198
msgid ""
"Guile protects against the\n"
"@uref{https://en.wikipedia.org/wiki/Inter-protocol_exploitation,\n"
"@dfn{HTTP inter-protocol exploitation attack}}, a scenario whereby an\n"
"attacker can, @i{via} an HTML page, cause a web browser to send data to\n"
"TCP servers listening on a loopback interface or private network.\n"
"Nevertheless, you are advised to use UNIX domain sockets, as in\n"
"@code{--listen=/some/local/file}, whenever possible.\n"
"@end quotation"
msgstr ""
"Guile защищается от \n"
"@uref{https://en.wikipedia.org/wiki/Inter-protocol_exploitation,\n"
"@dfn{HTTP inter-protocol exploitation attack}}, сценария, при котором\n"
"атакующий может, @i{через} HTML страницу, заставить веб-браузер отправлять "
"данные\n"
"на TCP сервер прослушивающий loopback интерфейс или частную сеть.\n"
"Тем не менее, вам рекомендуется использовать сокеты домена UNI, как в\n"
"@code{--listen=/some/local/file}, когда это возможно.\n"
"@end quotation"

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:201
msgid ""
"That said, @option{--listen} is great for interactive debugging and\n"
"development."
msgstr ""
"Тем не менее, @option{--listen} отлично подходит для интерактивной отладки и "
"разработки."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:203
msgctxt "/home/bear/work/guile/doc/guile/en/guile-invoke.texi:203"
msgid "@vnew{2.0}"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:206
msgid ""
"@item --auto-compile\n"
"Compile source files automatically (default behavior)."
msgstr ""
"@item --auto-compile\n"
"Автоматическая компиляция исходных файлов (поведение по умолчанию)."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:208
msgid "@vnew{2.0.1}"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:211
msgid ""
"@item --fresh-auto-compile\n"
"Treat the auto-compilation cache as invalid, forcing recompilation."
msgstr ""
"@item --fresh-auto-compile\n"
"Обозначить кеш автокомпиляции, как недействительный, вызывая "
"перекомпиляцию.\n"

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:213
msgctxt "/home/bear/work/guile/doc/guile/en/guile-invoke.texi:213"
msgid "@vnew{2.0}"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:216
msgid ""
"@item --no-auto-compile\n"
"Disable automatic source file compilation."
msgstr ""
"@item --no-auto-compile\n"
"Отменяет автоматическую компиляцию исходного файла."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:218
msgid "@vnew{2.0.8}"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:226
msgid ""
"@item --language=@var{lang}\n"
"For the remainder of the command line arguments, assume that files\n"
"mentioned with @code{-l} and expressions passed with @code{-c} are\n"
"written in @var{lang}.  @var{lang} must be the name of one of the\n"
"languages supported by the compiler (@pxref{Compiler Tower}).  When run\n"
"interactively, set the REPL's language to @var{lang} (@pxref{Using Guile\n"
"Interactively})."
msgstr ""
"@item --language=@var{lang}\n"
"Для оставшихся аргументов командной строки, предполагает, что упомянутые\n"
"файлы с @code{-l} и выражения переданные с  @code{-c} являются\n"
"написаными на языке @var{lang}.  @var{lang} должно быть одним из языков,\n"
"поддерживаемых компилятором (@pxref{Compiler Tower}).  При запуске в\n"
"интерактивном режиме устанавливает язык REPL в @var{lang} (@pxref{Using "
"Guile\n"
"Interactively})."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:229
msgid ""
"The default language is @code{scheme}; other interesting values include\n"
"@code{elisp} (for Emacs Lisp), and @code{ecmascript}."
msgstr ""
"По умолчанияю язык @code{scheme}; другие интересные значения включают\n"
"@code{elisp} (для Emacs Lisp), и @code{ecmascript}."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:232
msgid ""
"The example below shows the evaluation of expressions in Scheme, Emacs\n"
"Lisp, and ECMAScript:"
msgstr ""
"Пример ниже показывает вычисление выражения на Scheme, Emacs\n"
"Lisp и ECMAScript:"

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:238
msgid ""
"@example\n"
"guile -c \"(apply + '(1 2))\"\n"
"guile --language=elisp -c \"(= (funcall (symbol-function '+) 1 2) 3)\"\n"
"guile --language=ecmascript -c '(function (x) @{ return x * x; @})(2);'\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:241
msgid ""
"To load a file written in Scheme and one written in Emacs Lisp, and then\n"
"start a Scheme REPL, type:"
msgstr ""
"Чтобы загрузить файл, написаный на Scheme, а другой написаный на Emacs Lisp, "
"и затем\n"
"запустить Scheme REPL, наберите:"

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:245
msgid ""
"@example\n"
"guile -l foo.scm --language=elisp -l foo.el --language=scheme\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:247
msgctxt "/home/bear/work/guile/doc/guile/en/guile-invoke.texi:247"
msgid "@vnew{2.0}"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:250
msgid ""
"@item -h@r{, }--help\n"
"Display help on invoking Guile, and then exit."
msgstr ""
"@item -h@r{, }--help\n"
"Показывает справку по вызовам Guile, и завершает работу."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:253
msgid ""
"@item -v@r{, }--version\n"
"Display the current version of Guile, and then exit."
msgstr ""
"@item -v@r{, }--version\n"
"Показывает текущую версию Guile, и затем завершает работу."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:255
msgctxt "/home/bear/work/guile/doc/guile/en/guile-invoke.texi:255"
msgid "@end table"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:271
msgid ""
"@node Environment Variables\n"
"@subsection Environment Variables\n"
"@cindex environment variables\n"
"@cindex shell\n"
"@cindex initialization\n"
"The @dfn{environment} is a feature of the operating system; it consists\n"
"of a collection of variables with names and values.  Each variable is\n"
"called an @dfn{environment variable} (or, sometimes, a ``shell\n"
"variable''); environment variable names are case-sensitive, and it is\n"
"conventional to use upper-case letters only.  The values are all text\n"
"strings, even those that are written as numerals.  (Note that here we\n"
"are referring to names and values that are defined in the operating\n"
"system shell from which Guile is invoked.  This is not the same as a\n"
"Scheme environment that is defined within a running instance of Guile.\n"
"For a description of Scheme environments, @pxref{About Environments}.)"
msgstr ""
"@node Переменные окружающей среды\n"
"@subsection Environment Variables\n"
"@cindex environment variables\n"
"@cindex shell\n"
"@cindex initialization\n"
"Окружающая среда(@dfn{environment}) это функция(свойство) предоставляемая\n"
"операционной системой; она состоит из набора переменных с именами и "
"значениями.\n"
"Каждая переменная называется переменной среды(@dfn{environment variable})\n"
" (или, иногда, переменной оболочки (``shell variable''); Имена переменных "
"среды\n"
"чувствительны к регистру и обычно используют только заглавные буквы. "
"Значения это\n"
"текстовые строки, даже те, которые записаны как числа.  (Обратите внимание, "
"что здесь\n"
"мы имеем в виду имена и значения, которые определены в оболочке операционной "
"системы,\n"
"из которой вызывается Guile.  Это не тоже самое. что среда Scheme "
"определяемая в \n"
"работающем экземпляре Guile.\n"
"Для описания среды Scheme, см. @pxref{About Environments}.)"

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:277
msgid ""
"How to set environment variables before starting Guile depends on the\n"
"operating system and, especially, the shell that you are using.  For\n"
"example, here is how to tell Guile to provide detailed warning messages\n"
"about deprecated features by setting @env{GUILE_WARN_DEPRECATED} using\n"
"Bash:"
msgstr ""
"Как установить переменные среды перед запуском Guile, зависит от "
"операционной\n"
"системы и особенно от используемой вами оболочки.  Например, вот как "
"сказать\n"
"Guile предоставлять подробные сообщения об устаревших функциях, путем "
"установки\n"
"@env{GUILE_WARN_DEPRECATED} используя Bash:"

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:282
msgid ""
"@example\n"
"$ export GUILE_WARN_DEPRECATED=\"detailed\"\n"
"$ guile\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:285
msgid ""
"@noindent\n"
"Or, detailed warnings can be turned on for a single invocation using:"
msgstr ""
"@noindent\n"
"Или, подробные предупреждения могут быть включены для одного вызова,\n"
"с помощью:"

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:289
msgid ""
"@example\n"
"$ env GUILE_WARN_DEPRECATED=\"detailed\" guile\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:293
msgid ""
"If you wish to retrieve or change the value of the shell environment\n"
"variables that affect the run-time behavior of Guile from within a\n"
"running instance of Guile, see @ref{Runtime Environment}."
msgstr ""
"Если вы хотите получить или изменить значение переменных среды облочки,\n"
"которые влияют на поведение  Guile во время выполнения из запущенного\n"
"экземпляра Guile, см. @ref{Runtime Environment}."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:296
msgid ""
"Here are the environment variables that affect the run-time behavior of\n"
"Guile:"
msgstr ""
"Вот переменные окружения, которые влияют на поведение Guile во время "
"выполнения:"

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:303
msgid ""
"@table @env\n"
"@item GUILE_AUTO_COMPILE\n"
"@vindex GUILE_AUTO_COMPILE\n"
"This is a flag that can be used to tell Guile whether or not to compile\n"
"Scheme source files automatically.  Starting with Guile 2.0, Scheme\n"
"source files will be compiled automatically, by default."
msgstr ""
"@table @env\n"
"@item GUILE_AUTO_COMPILE\n"
"@vindex GUILE_AUTO_COMPILE\n"
"Этот флаг, который может использоваться для указания Guile, компилировать\n"
"или нет исходные файлы Scheme автоматически.  Начиная с Guile 2.0, исходные\n"
"файлы Scheme будут компилироваться автоматически, по умолчанию."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:308
msgid ""
"If a compiled (@file{.go}) file corresponding to a @file{.scm} file is\n"
"not found or is not newer than the @file{.scm} file, the @file{.scm}\n"
"file will be compiled on the fly, and the resulting @file{.go} file\n"
"stored away.  An advisory note will be printed on the console."
msgstr ""
"Если скомпилированный файл (@file{.go}) соответствующий файлу @file{.scm} \n"
"не найден, или не новее чем файл @file{.scm}, файл @file{.scm} будет\n"
"скомпилирован на лету, и результирующий файл @file{.go} сохранен.\n"
"Консультирующее уведомление будет напечатано на консоли."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:313
msgid ""
"Compiled files will be stored in the directory\n"
"@file{$XDG_CACHE_HOME/@/guile/@/ccache}, where @env{XDG_CACHE_HOME}\n"
"defaults to the directory @file{$HOME/.cache}.  This directory will be\n"
"created if it does not already exist."
msgstr ""
"Скомпилированные файлы будут храниться в каталоге\n"
"@file{$XDG_CACHE_HOME/@/guile/@/ccache}, где @env{XDG_CACHE_HOME}\n"
"по умолчанию это директория @file{$HOME/.cache}.  Этот каталог будет "
"создан,\n"
"если он до этого не существовал."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:318
msgid ""
"Note that this mechanism depends on the timestamp of the @file{.go} file\n"
"being newer than that of the @file{.scm} file; if the @file{.scm} or\n"
"@file{.go} files are moved after installation, care should be taken to\n"
"preserve their original timestamps."
msgstr ""
"Обратите внимание, что механизм зависит от временной отметки файла @file{."
"go},\n"
"являющейся более новой, чем у файла @file{.scm}; если файлы @file{.scm} или\n"
"@file{.go} перемещаются полсе установки, следует соблюдать осторожность, "
"чтобы\n"
"сохранить их оригинальные метки времени."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:323
msgid ""
"Set @env{GUILE_AUTO_COMPILE} to zero (0), to prevent Scheme files from\n"
"being compiled automatically.  Set this variable to ``fresh'' to tell\n"
"Guile to compile Scheme files whether they are newer than the compiled\n"
"files or not."
msgstr ""
"Установите @env{GUILE_AUTO_COMPILE} в ноль (0), чтобы предотвратить \n"
"автоматическую компиляцию файлов Scheme. Установите эту переменную в\n"
"``fresh'', чтобы сообщить Guile о компиляции файлов Scheme, в не "
"зависимости\n"
"от того, являются ли они новее скомпилированных или нет."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:325
msgid "@xref{Compilation}."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:331
msgid ""
"@item GUILE_HISTORY\n"
"@vindex GUILE_HISTORY\n"
"This variable names the file that holds the Guile REPL command history.\n"
"You can specify a different history file by setting this environment\n"
"variable.  By default, the history file is @file{$HOME/.guile_history}."
msgstr ""
"@item GUILE_HISTORY\n"
"@vindex GUILE_HISTORY\n"
"Эта переменная именует файл, содержащий историю команд Guile REPL.\n"
"Вы можете указать другой файл истории, установив эту переменную среды.\n"
"По умолчанию файл истории это @file{$HOME/.guile_history}."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:339
msgid ""
"@item GUILE_INSTALL_LOCALE\n"
"@vindex GUILE_INSTALL_LOCALE\n"
"This is a flag that can be used to tell Guile whether or not to install\n"
"the current locale at startup, via a call to @code{(setlocale LC_ALL\n"
"\"\")}@footnote{The @code{GUILE_INSTALL_LOCALE} environment variable was\n"
"ignored in Guile versions prior to 2.0.9.}.  @xref{Locales}, for more\n"
"information on locales."
msgstr ""
"@item GUILE_INSTALL_LOCALE\n"
"@vindex GUILE_INSTALL_LOCALE\n"
"Это флаг, который может использоваться, чтобы сообщить Guile, устанавливать "
"или\n"
"нет текущую локаль при запуске через вызов @code{(setlocale LC_ALL\n"
"\"\")}@footnote{Переменная среды @code{GUILE_INSTALL_LOCALE} была "
"проигнорирована в\n"
"версиях Guile до 2.0.9.}.  @xref{Locales}, для дальнейшей информации о "
"локалях."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:343
msgid ""
"You may explicitly indicate that you do not want to install\n"
"the locale by setting @env{GUILE_INSTALL_LOCALE} to @code{0}, or\n"
"explicitly enable it by setting the variable to @code{1}."
msgstr ""
"Вы можете явно указать, что не хотите устанавливать локаль, установив\n"
" @env{GUILE_INSTALL_LOCALE} в @code{0}, или явно включить ее,\n"
"установив переменную в @code{1}."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:347
msgid ""
"Usually, installing the current locale is the right thing to do.  It\n"
"allows Guile to correctly parse and print strings with non-ASCII\n"
"characters.  Therefore, this option is on by default."
msgstr ""
"Обычно, установка текущей локали это правильная вещь. Это позволяет \n"
"Guile правильно анализировать и печатать строки с не-ASCII символьными\n"
"знаками. Следовательно по умолчанию эта опция включена."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:356
msgid ""
"@item GUILE_STACK_SIZE\n"
"@vindex GUILE_STACK_SIZE\n"
"Guile currently has a limited stack size for Scheme computations.\n"
"Attempting to call too many nested functions will signal an error.  This\n"
"is good to detect infinite recursion, but sometimes the limit is reached\n"
"for normal computations.  This environment variable, if set to a\n"
"positive integer, specifies the number of Scheme value slots to allocate\n"
"for the stack."
msgstr ""
"@item GUILE_STACK_SIZE\n"
"@vindex GUILE_STACK_SIZE\n"
"Guile в настоящее время имеет ограниченный размер стека для вычислений "
"Scheme.\n"
"Попытка вызова слишком большого количества вложенных функций будет "
"сигнализировать\n"
"об ошибке. Это хорошо обнаруживает бесконечную рекурсию, но иногда предел "
"достигается\n"
"и для обычных вычислений.  Эта переменная среды, если задано положительное "
"целое числ,\n"
"указывает число слотов значений Scheme размещаемых в стеке."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:359
msgid ""
"In the future we will implement stacks that can grow and shrink, but for\n"
"now this hack will have to do."
msgstr ""
"В будущем мы будем внедрять стеки, которые могут расти и уменьшаться, но "
"пока этот\n"
"хак придется делать вам."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:368
msgid ""
"@item GUILE_LOAD_COMPILED_PATH\n"
"@vindex GUILE_LOAD_COMPILED_PATH\n"
"This variable may be used to augment the path that is searched for\n"
"compiled Scheme files (@file{.go} files) when loading.  Its value should\n"
"be a colon-separated list of directories.  If it contains the special\n"
"path component @code{...} (ellipsis), then the default path is put in\n"
"place of the ellipsis, otherwise the default path is placed at the end.\n"
"The result is stored in @code{%load-compiled-path} (@pxref{Load Paths})."
msgstr ""
"@item GUILE_LOAD_COMPILED_PATH\n"
"@vindex GUILE_LOAD_COMPILED_PATH\n"
"Эта переменная может использоваться для дополнения пути, по которому ищутся\n"
"скомпилированные файлы Scheme (@file{.go}) при загрузке.  Его значение "
"должно\n"
"быть списком каталогов, разделенным двоеточиями. Если он содержит "
"специальный\n"
"компонент пути @code{...} (многоточия), то вместо многоточия указывается "
"путь по\n"
"умолчанию в конце. Результат сохраняется в @code{%load-compiled-path} "
"(@pxref{Load Paths})."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:372
msgid ""
"Here is an example using the Bash shell that adds the current directory,\n"
"@file{.}, and the relative directory @file{../my-library} to\n"
"@code{%load-compiled-path}:"
msgstr ""
"Вот пример использования оболочки Bash, которая доббавляет текущий каталог "
"@file{.}, \n"
" и относительный каталог @file{../my-library} к @code{%load-compiled-path}:"

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:378
msgid ""
"@example\n"
"$ export GUILE_LOAD_COMPILED_PATH=\".:../my-library\"\n"
"$ guile -c '(display %load-compiled-path) (newline)'\n"
"(. ../my-library /usr/local/lib/guile/2.2/ccache)\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:387
msgid ""
"@item GUILE_LOAD_PATH\n"
"@vindex GUILE_LOAD_PATH\n"
"This variable may be used to augment the path that is searched for\n"
"Scheme files when loading.  Its value should be a colon-separated list\n"
"of directories.  If it contains the special path component @code{...}\n"
"(ellipsis), then the default path is put in place of the ellipsis,\n"
"otherwise the default path is placed at the end.  The result is stored\n"
"in @code{%load-path} (@pxref{Load Paths})."
msgstr ""
"@item GUILE_LOAD_PATH\n"
"@vindex GUILE_LOAD_PATH\n"
"Эта переменная может быть использована для дополнения пути, по которому\n"
"Scheme ищет файлы для загрузки.  Ее значение должно быть разделенным "
"двоеточиями\n"
"списком каталогов.  Если она содержит специальный компонент пути @code{...}\n"
"(многоточие), тогда путь по умолчанию подставляется вместо многоточия,\n"
"в противном случае путь по умолчанию находитсья в конце.  результат "
"сохраняется в\n"
" @code{%load-path} (@pxref{Load Paths})."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:391
msgid ""
"Here is an example using the Bash shell that prepends the current\n"
"directory to @code{%load-path}, and adds the relative directory\n"
"@file{../srfi} to the end:"
msgstr ""
"Вот пример использования оболочки Bash, который добавляет текущий каталог в\n"
"@code{%load-path}, и добавляет относительный каталог\n"
"@file{../srfi} в конец:"

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:401
msgid ""
"@example\n"
"$ env GUILE_LOAD_PATH=\".:...:../srfi\" \\\n"
"guile -c '(display %load-path) (newline)'\n"
"(. /usr/local/share/guile/2.2 \\\n"
"/usr/local/share/guile/site/2.2 \\\n"
"/usr/local/share/guile/site \\\n"
"/usr/local/share/guile \\\n"
"../srfi)\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:404
msgid ""
"(Note: The line breaks, above, are for documentation purposes only, and\n"
"not required in the actual example.)"
msgstr ""
"(Примечание: Разрывы строк, приведенные выше, предназначены только для "
"документирования,\n"
"и не требуются в реальном примере.)"

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:414
msgid ""
"@item GUILE_WARN_DEPRECATED\n"
"@vindex GUILE_WARN_DEPRECATED\n"
"As Guile evolves, some features will be eliminated or replaced by newer\n"
"features.  To help users migrate their code as this evolution occurs,\n"
"Guile will issue warning messages about code that uses features that\n"
"have been marked for eventual elimination.  @env{GUILE_WARN_DEPRECATED}\n"
"can be set to ``no'' to tell Guile not to display these warning\n"
"messages, or set to ``detailed'' to tell Guile to display more lengthy\n"
"messages describing the warning.  @xref{Deprecation}."
msgstr ""
"@item GUILE_WARN_DEPRECATED\n"
"@vindex GUILE_WARN_DEPRECATED\n"
"По мере развития Guile, некоторые функции будут удалены или заменены "
"новыми.\n"
"Чтобы помочь пользователям перенести свой код по мере развития, Guile "
"выдаст\n"
"предупреждения о коде, который исползует функции, которые были отмечены для\n"
"возможного отключения.  @env{GUILE_WARN_DEPRECATED}\n"
"может быть установлен в  нет``no'', чтобы сказать Guile не отображать эти\n"
"предупреждающие сообщения, или установлен ``detailed''(подробно), чтобы "
"сообщить\n"
"Guile об отображении более длинных сообщений с описанием предупреждения.\n"
"@xref{Deprecation}."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:420
msgid ""
"@item HOME\n"
"@vindex HOME\n"
"Guile uses the environment variable @env{HOME}, the name of your home\n"
"directory, to locate various files, such as @file{.guile} or\n"
"@file{.guile_history}."
msgstr ""
"@item HOME\n"
"@vindex HOME\n"
"Guile использует переменную среды окружения @env{HOME}, имя вашего "
"домашнего\n"
"каталога, чтобы найти различные файлы, такие как @file{.guile} или\n"
"@file{.guile_history}."

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:422
msgctxt "/home/bear/work/guile/doc/guile/en/guile-invoke.texi:422"
msgid "@end table"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/guile-invoke.texi:426
msgid ""
"@c Local Variables: \n"
"@c mode: texinfo\n"
"@c TeX-master: \"guile\"\n"
"@c End: "
msgstr ""
