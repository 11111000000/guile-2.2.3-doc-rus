#
# NuINu <don't@send.my>, 2019.
#
#. extracted from /home/bear/work/guile/doc/guile/en/api-lalr.texi
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-07 12:36+0300\n"
"PO-Revision-Date: 2019-03-06 10:33+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: /home/bear/work/guile/doc/guile/en/api-lalr.texi:6
msgid ""
"@c -*-texinfo-*-\n"
"@c This is part of the GNU Guile Reference Manual.\n"
"@c Copyright (C)  1996, 1997, 2000, 2001, 2002, 2003, 2004, 2007, 2009, "
"2010\n"
"@c   Free Software Foundation, Inc.\n"
"@c See the file guile.texi for copying conditions."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-lalr.texi:9
msgid ""
"@node LALR(1) Parsing\n"
"@section LALR(1) Parsing"
msgstr ""
"@node LALR(1) Parsing\n"
"@section LALR(1) Разбор(Parsing)"

#: /home/bear/work/guile/doc/guile/en/api-lalr.texi:16
msgid ""
"The @code{(system base lalr)} module provides the\n"
"@uref{http://code.google.com/p/lalr-scm/, @code{lalr-scm} LALR(1) parser\n"
"generator by Dominique Boucher}.  @code{lalr-scm} uses the same algorithm as "
"GNU\n"
"Bison (@pxref{Introduction, Introduction to Bison,, bison, Bison@comma{} "
"The\n"
"Yacc-compatible Parser Generator}).  Parsers are defined using the\n"
"@code{lalr-parser} macro."
msgstr ""
"Модуль @code{(system base lalr)} предоставляет \n"
"@uref{http://code.google.com/p/lalr-scm/, @code{lalr-scm} LALR(1) генератор\n"
"парсеров от Dominique Boucher}.  @code{lalr-scm} использует тот же самый "
"алгоритм\n"
"как GNU Bison (@pxref{Introduction, Introduction to Bison,, bison, "
"Bison@comma{} это\n"
"Yacc-совместимый генератор разборщиков(Parser)}).  Парсеры определяются с "
"помощью\n"
"использования макроса @code{lalr-parser}."

#: /home/bear/work/guile/doc/guile/en/api-lalr.texi:21
msgid ""
"@deffn {Scheme Syntax} lalr-parser [@var{options}] @var{tokens} "
"@var{rules}...\n"
"Generate an LALR(1) syntax analyzer.  @var{tokens} is a list of symbols\n"
"representing the terminal symbols of the grammar.  @var{rules} are the "
"grammar\n"
"production rules."
msgstr ""
"@deffn {Scheme Syntax} lalr-parser [@var{options}] @var{tokens} "
"@var{rules}...\n"
"Создает синтаксический анализатор LALR(1).  @var{tokens} это список "
"символов,\n"
"представляющих терминальные символы граматики.  @var{rules} это правила \n"
"продукций граматики."

#: /home/bear/work/guile/doc/guile/en/api-lalr.texi:26
msgid ""
"Each rule has the form @code{(@var{non-terminal} (@var{rhs} ...) : "
"@var{action}\n"
"...)}, where @var{non-terminal} is the name of the rule, @var{rhs} are the\n"
"right-hand sides, i.e., the production rule, and @var{action} is a semantic\n"
"action associated with the rule."
msgstr ""
"Каждое правило имеет вид @code{(@var{non-terminal} (@var{rhs} ...) : "
"@var{action}\n"
"...)}, где @var{non-terminal} это имя правила, @var{rhs} это правые стороны, "
"т.е.\n"
"продукционные правила, и  @var{action} это семантическое действие связанное "
"с\n"
"правилом."

#: /home/bear/work/guile/doc/guile/en/api-lalr.texi:34
msgid ""
"The generated parser is a two-argument procedure that takes a\n"
"@dfn{tokenizer} and a @dfn{syntax error procedure}.  The tokenizer\n"
"should be a thunk that returns lexical tokens as produced by\n"
"@code{make-lexical-token}.  The syntax error procedure may be called\n"
"with at least an error message (a string), and optionally the lexical\n"
"token that caused the error.\n"
"@end deffn"
msgstr ""
"Сгенерированный парсер представляет собой процедуру с двумя аргументами,\n"
"которая принимает  @dfn{tokenizer} и @dfn{syntax error procedure}.  \n"
"tokenizer(токенайзер) должен быть чанком(кодом схемы) который возвращает\n"
"лексические токены, созданные как @code{make-lexical-token}.  Процедура\n"
"синтаксической ошибки(syntax error procedure) может быть вызвана с,\n"
"по крайней мере, сообщением об ошибке( строкой) и необязательно, "
"лексическим\n"
"токеном, который вызвал ошибку.\n"
"@end deffn"

#: /home/bear/work/guile/doc/guile/en/api-lalr.texi:35
msgid "Please refer to the @code{lalr-scm} documentation for details."
msgstr "Пожалуйста обратитесь к документации @code{lalr-scm} за деталями."
