#. extracted from /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-07 12:37+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 2.2.5\n"

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:6
msgid ""
"@c -*-texinfo-*-\n"
"@c This is part of the GNU Guile Reference Manual.\n"
"@c Copyright (C)  1996, 1997, 2000, 2001, 2002, 2003, 2004, 2011\n"
"@c   Free Software Foundation, Inc.\n"
"@c See the file guile.texi for copying conditions."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:9
msgid ""
"@node getopt-long\n"
"@section The (ice-9 getopt-long) Module"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:15
msgid ""
"The @code{(ice-9 getopt-long)} facility is designed to help parse\n"
"arguments that are passed to Guile programs on the command line, and is\n"
"modelled after the C library's facility of the same name\n"
"(@pxref{Getopt,,,libc,The GNU C Library Reference Manual}).  For a more\n"
"low-level interface to command-line argument parsing, @xref{SRFI-37}."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:18
msgid ""
"The @code{(ice-9 getopt-long)} module exports two procedures:\n"
"@code{getopt-long} and @code{option-ref}."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:26
msgid ""
"@itemize @bullet\n"
"@item\n"
"@code{getopt-long} takes a list of strings --- the command line\n"
"arguments --- an @dfn{option specification}, and some optional keyword\n"
"parameters.  It parses the command line arguments according to the\n"
"option specification and keyword parameters, and returns a data\n"
"structure that encapsulates the results of the parsing."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:31
msgid ""
"@item\n"
"@code{option-ref} then takes the parsed data structure and a specific\n"
"option's name, and returns information about that option in particular.\n"
"@end itemize"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:35
msgid ""
"To make these procedures available to your Guile script, include the\n"
"expression @code{(use-modules (ice-9 getopt-long))} somewhere near the\n"
"top, before the first usage of @code{getopt-long} or @code{option-ref}."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:43
msgid ""
"@menu\n"
"* getopt-long Example::         A short getopt-long example.\n"
"* Option Specification::        How to write an option specification.\n"
"* Command Line Format::         The expected command line format.\n"
"* getopt-long Reference::       Full documentation for @code{getopt-long}.\n"
"* option-ref Reference::        Full documentation for @code{option-ref}.\n"
"@end menu"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:47
msgid ""
"@node getopt-long Example\n"
"@subsection A Short getopt-long Example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:54
msgid ""
"This section illustrates how @code{getopt-long} is used by presenting\n"
"and dissecting a simple example.  The first thing that we need is an\n"
"@dfn{option specification} that tells @code{getopt-long} how to parse\n"
"the command line.  This specification is an association list with the\n"
"long option name as the key.  Here is how such a specification might\n"
"look:"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:60
msgid ""
"@lisp\n"
"(define option-spec\n"
"  '((version (single-char #\\v) (value #f))\n"
"    (help    (single-char #\\h) (value #f))))\n"
"@end lisp"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:66
msgid ""
"This alist tells @code{getopt-long} that it should accept two long\n"
"options, called @emph{version} and @emph{help}, and that these options\n"
"can also be selected by the single-letter abbreviations @emph{v} and\n"
"@emph{h}, respectively.  The @code{(value #f)} clauses indicate that\n"
"neither of the options accepts a value."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:69
msgid ""
"With this specification we can use @code{getopt-long} to parse a given\n"
"command line:"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:73
msgid ""
"@lisp\n"
"(define options (getopt-long (command-line) option-spec))\n"
"@end lisp"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:77
msgid ""
"After this call, @code{options} contains the parsed command line and is\n"
"ready to be examined by @code{option-ref}.  @code{option-ref} is called\n"
"like this:"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:81
msgid ""
"@lisp\n"
"(option-ref options 'help #f)\n"
"@end lisp"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:89
msgid ""
"@noindent\n"
"It expects the parsed command line, a symbol indicating the option to\n"
"examine, and a default value.  The default value is returned if the\n"
"option was not present in the command line, or if the option was present\n"
"but without a value; otherwise the value from the command line is\n"
"returned.  Usually @code{option-ref} is called once for each possible\n"
"option that a script supports."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:92
msgid ""
"The following example shows a main program which puts all this together\n"
"to parse its command line and figure out what the user wanted."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:113
msgid ""
"@lisp\n"
"(define (main args)\n"
"  (let* ((option-spec '((version (single-char #\\v) (value #f))\n"
"                        (help    (single-char #\\h) (value #f))))\n"
"         (options (getopt-long args option-spec))\n"
"         (help-wanted (option-ref options 'help #f))\n"
"         (version-wanted (option-ref options 'version #f)))\n"
"    (if (or version-wanted help-wanted)\n"
"        (begin\n"
"          (if version-wanted\n"
"              (display \"getopt-long-example version 0.3\\n"
"\"))\n"
"          (if help-wanted\n"
"              (display \"\\\n"
"getopt-long-example [options]\n"
"  -v, --version    Display version\n"
"  -h, --help       Display this help\n"
"\")))\n"
"        (begin\n"
"          (display \"Hello, World!\") (newline)))))\n"
"@end lisp"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:117
msgid ""
"@node Option Specification\n"
"@subsection How to Write an Option Specification"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:122
msgid ""
"An option specification is an association list (@pxref{Association\n"
"Lists}) with one list element for each supported option. The key of each\n"
"list element is a symbol that names the option, while the value is a\n"
"list of option properties:"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:130
msgid ""
"@lisp\n"
"OPTION-SPEC ::=  '( (OPT-NAME1 (PROP-NAME PROP-VALUE) @dots{})\n"
"                    (OPT-NAME2 (PROP-NAME PROP-VALUE) @dots{})\n"
"                    (OPT-NAME3 (PROP-NAME PROP-VALUE) @dots{})\n"
"                    @dots{}\n"
"                  )\n"
"@end lisp"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:137
msgid ""
"Each @var{opt-name} specifies the long option name for that option.  For\n"
"example, a list element with @var{opt-name} @code{background} specifies\n"
"an option that can be specified on the command line using the long\n"
"option @code{--background}.  Further information about the option ---\n"
"whether it takes a value, whether it is required to be present in the\n"
"command line, and so on --- is specified by the option properties."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:145
msgid ""
"In the example of the preceding section, we already saw that a long\n"
"option name can have a equivalent @dfn{short option} character.  The\n"
"equivalent short option character can be set for an option by specifying\n"
"a @code{single-char} property in that option's property list.  For\n"
"example, a list element like @code{'(output (single-char #\\o) @dots{})}\n"
"specifies an option with long name @code{--output} that can also be\n"
"specified by the equivalent short name @code{-o}."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:158
msgid ""
"The @code{value} property specifies whether an option requires or\n"
"accepts a value.  If the @code{value} property is set to @code{#t}, the\n"
"option requires a value: @code{getopt-long} will signal an error if the\n"
"option name is present without a corresponding value.  If set to\n"
"@code{#f}, the option does not take a value; in this case, a non-option\n"
"word that follows the option name in the command line will be treated as\n"
"a non-option argument.  If set to the symbol @code{optional}, the option\n"
"accepts a value but does not require one: a non-option word that follows\n"
"the option name in the command line will be interpreted as that option's\n"
"value.  If the option name for an option with @code{'(value optional)}\n"
"is immediately followed in the command line by @emph{another} option\n"
"name, the value for the first option is implicitly @code{#t}."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:163
msgid ""
"The @code{required?} property indicates whether an option is required to\n"
"be present in the command line.  If the @code{required?}  property is\n"
"set to @code{#t}, @code{getopt-long} will signal an error if the option\n"
"is not specified."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:171
msgid ""
"Finally, the @code{predicate} property can be used to constrain the\n"
"possible values of an option.  If used, the @code{predicate} property\n"
"should be set to a procedure that takes one argument --- the proposed\n"
"option value as a string --- and returns either @code{#t} or @code{#f}\n"
"according as the proposed value is or is not acceptable.  If the\n"
"predicate procedure returns @code{#f}, @code{getopt-long} will signal an\n"
"error."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:176
msgid ""
"By default, options do not have single-character equivalents, are not\n"
"required, and do not take values.  Where the list element for an option\n"
"includes a @code{value} property but no @code{predicate} property, the\n"
"option values are unconstrained."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:180
msgid ""
"@node Command Line Format\n"
"@subsection Expected Command Line Format"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:185
msgid ""
"In order for @code{getopt-long} to correctly parse a command line, that\n"
"command line must conform to a standard set of rules for how command\n"
"line options are specified.  This section explains what those rules\n"
"are."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:191
msgid ""
"@code{getopt-long} splits a given command line into several pieces.  All\n"
"elements of the argument list are classified to be either options or\n"
"normal arguments.  Options consist of two dashes and an option name\n"
"(so-called @dfn{long} options), or of one dash followed by a single\n"
"letter (@dfn{short} options)."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:197
msgid ""
"Options can behave as switches, when they are given without a value, or\n"
"they can be used to pass a value to the program.  The value for an\n"
"option may be specified using an equals sign, or else is simply the next\n"
"word in the command line, so the following two invocations are\n"
"equivalent:"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:202
msgid ""
"@example\n"
"$ ./foo.scm --output=bar.txt\n"
"$ ./foo.scm --output bar.txt\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:206
msgid ""
"Short options can be used instead of their long equivalents and can be\n"
"grouped together after a single dash.  For example, the following\n"
"commands are equivalent."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:212
msgid ""
"@example\n"
"$ ./foo.scm --version --help\n"
"$ ./foo.scm -v --help\n"
"$ ./foo.scm -vh\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:217
msgid ""
"If an option requires a value, it can only be grouped together with other\n"
"short options if it is the last option in the group; the value is the\n"
"next argument.  So, for example, with the following option\n"
"specification ---"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:223
msgid ""
"@lisp\n"
"((apples    (single-char #\\a))\n"
" (blimps    (single-char #\\b) (value #t))\n"
" (catalexis (single-char #\\c) (value #t)))\n"
"@end lisp"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:226
msgid ""
"@noindent\n"
"--- the following command lines would all be acceptable:"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:232
msgid ""
"@example\n"
"$ ./foo.scm -a -b bang -c couth\n"
"$ ./foo.scm -ab bang -c couth\n"
"$ ./foo.scm -ac couth -b bang\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:236
msgid ""
"But the next command line is an error, because @code{-b} is not the last\n"
"option in its combination, and because a group of short options cannot\n"
"include two options that both require values:"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:240
msgid ""
"@example\n"
"$ ./foo.scm -abc couth bang\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:245
msgid ""
"If an option's value is optional, @code{getopt-long} decides whether the\n"
"option has a value by looking at what follows it in the argument list.\n"
"If the next element is a string, and it does not appear to be an option\n"
"itself, then that string is the option's value."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:249
msgid ""
"If the option @code{--} appears in the argument list, argument parsing\n"
"stops there and subsequent arguments are returned as ordinary arguments,\n"
"even if they resemble options.  So, with the command line"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:253
msgid ""
"@example\n"
"$ ./foo.scm --apples \"Granny Smith\" -- --blimp Goodyear\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:259
msgid ""
"@noindent\n"
"@code{getopt-long} will recognize the @code{--apples} option as having\n"
"the value \"Granny Smith\", but will not treat @code{--blimp} as an\n"
"option.  The strings @code{--blimp} and @code{Goodyear} will be returned\n"
"as ordinary argument strings."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:263
msgid ""
"@node getopt-long Reference\n"
"@subsection Reference Documentation for @code{getopt-long}"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:267
msgid ""
"@deffn {Scheme Procedure} getopt-long args grammar [#:stop-at-first-non-"
"option #t]\n"
"Parse the command line given in @var{args} (which must be a list of\n"
"strings) according to the option specification @var{grammar}."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:269
msgid "The @var{grammar} argument is expected to be a list of this form:"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:271
msgid "@code{((@var{option} (@var{property} @var{value}) @dots{}) @dots{})}"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:275
msgid ""
"where each @var{option} is a symbol denoting the long option, but\n"
"without the two leading dashes (e.g.@: @code{version} if the option is\n"
"called @code{--version})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:280
msgid ""
"For each option, there may be list of arbitrarily many property/value\n"
"pairs.  The order of the pairs is not important, but every property may\n"
"only appear once in the property list.  The following table lists the\n"
"possible properties:"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:300
msgid ""
"@table @asis\n"
"@item @code{(single-char @var{char})}\n"
"Accept @code{-@var{char}} as a single-character equivalent to\n"
"@code{--@var{option}}.  This is how to specify traditional Unix-style\n"
"flags.\n"
"@item @code{(required? @var{bool})} \n"
"If @var{bool} is true, the option is required.  @code{getopt-long} will\n"
"raise an error if it is not found in @var{args}.\n"
"@item @code{(value @var{bool})}\n"
"If @var{bool} is @code{#t}, the option accepts a value; if it is\n"
"@code{#f}, it does not; and if it is the symbol @code{optional}, the\n"
"option may appear in @var{args} with or without a value.\n"
"@item @code{(predicate @var{func})}\n"
"If the option accepts a value (i.e.@: you specified @code{(value #t)} for\n"
"this option), then @code{getopt-long} will apply @var{func} to the\n"
"value, and throw an exception if it returns @code{#f}.  @var{func}\n"
"should be a procedure which accepts a string and returns a boolean\n"
"value; you may need to use quasiquotes to get it into @var{grammar}.\n"
"@end table"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:308
msgid ""
"The @code{#:stop-at-first-non-option} keyword, if specified with any\n"
"true value, tells @code{getopt-long} to stop when it gets to the first\n"
"non-option in the command line.  That is, at the first word which is\n"
"neither an option itself, nor the value of an option.  Everything in the\n"
"command line from that word onwards will be returned as non-option\n"
"arguments.\n"
"@end deffn"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:314
msgid ""
"@code{getopt-long}'s @var{args} parameter is expected to be a list of\n"
"strings like the one returned by @code{command-line}, with the first\n"
"element being the name of the command.  Therefore @code{getopt-long}\n"
"ignores the first element in @var{args} and starts argument\n"
"interpretation with the second element."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:317
msgid ""
"@code{getopt-long} signals an error if any of the following conditions\n"
"hold."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:321
msgid ""
"@itemize @bullet\n"
"@item\n"
"The option grammar has an invalid syntax."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:325
msgid ""
"@item\n"
"One of the options in the argument list was not specified by the\n"
"grammar."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:328
msgid ""
"@item\n"
"A required option is omitted."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:331
msgid ""
"@item\n"
"An option which requires an argument did not get one."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:335
msgid ""
"@item\n"
"An option that doesn't accept an argument does get one (this can only\n"
"happen using the long option @code{--opt=@var{value}} syntax)."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:339
msgid ""
"@item\n"
"An option predicate fails.\n"
"@end itemize"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:351
msgid ""
"@code{#:stop-at-first-non-option} is useful for command line invocations\n"
"like @code{guild [--help | --version] [script [script-options]]}\n"
"and @code{cvs [general-options] command [command-options]}, where there\n"
"are options at two levels: some generic and understood by the outer\n"
"command, and some that are specific to the particular script or command\n"
"being invoked.  To use @code{getopt-long} in such cases, you would call\n"
"it twice: firstly with @code{#:stop-at-first-non-option #t}, so as to\n"
"parse any generic options and identify the wanted script or sub-command;\n"
"secondly, and after trimming off the initial generic command words, with\n"
"a script- or sub-command-specific option grammar, so as to process those\n"
"specific options."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:355
msgid ""
"@node option-ref Reference\n"
"@subsection Reference Documentation for @code{option-ref}"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:362
msgid ""
"@deffn {Scheme Procedure} option-ref options key default\n"
"Search @var{options} for a command line option named @var{key} and\n"
"return its value, if found.  If the option has no value, but was given,\n"
"return @code{#t}.  If the option was not given, return @var{default}.\n"
"@var{options} must be the result of a call to @code{getopt-long}.\n"
"@end deffn"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:365
msgid ""
"@code{option-ref} always succeeds, either by returning the requested\n"
"option value from the command line, or the default value."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/mod-getopt-long.texi:367
msgid ""
"The special key @code{'()} can be used to get a list of all\n"
"non-option arguments."
msgstr ""
