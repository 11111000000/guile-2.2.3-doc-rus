@c -*-texinfo-*-
@c This is part of the GNU Guile Reference Manual.
@c Copyright (C)  1996, 1997, 2000, 2001, 2002, 2003, 2004, 2007
@c   Free Software Foundation, Inc.
@c See the file guile.texi for copying conditions.

@node Initialization
@section Инициализация Guile
@cindex Initializing Guile

Каждый поток, который хочет использовать функции из API Guile, должен
поместить себя в guile режим  с помощью вызова функции @code{scm_with_guile} или
@code{scm_init_guile}.  Глобальное состояние Guile инициализируется автоматически,
когда первый поток входит в режим guile.

Когда поток хочет заблокировать все функции API Guile, он должен
выйти временно из режима guile вызвав @code{scm_without_guile},
@xref{Blocking}.

Потоки созданные с помощью @code{call-with-new-thread} или
@code{scm_spawn_thread} начинаются в режиме guile, поэтому вам не нужно
его инициализировать.

@deftypefn {C Function} {void *} scm_with_guile (void *(*func)(void *), void *data)
Вызывает @var{func}, передавая ей данные @var{data} и возвращая то что возвращает 
функция @var{func}.  Пока @var{func} выполняется, текущий поток находиться в режиме
guilee и может использовать Guile API.

Когда @code{scm_with_guile} вызывается из режима guile, поток остается в
режиме guile, когда @code{scm_with_guile} возвращается(завершается).

В противном случае, он переводит текущий поток в режим guile и, если необходимо,
выдает ему представление Scheme котораое содержит в списке возврат функции,
например, @code{all-threads}.  Это представление Scheme не удаляется, когда
происходит возврат из @code{scm_with_guile}, так что данный поток вседа представлен
одним и тем же значением Scheme в течении всего времени жизни(, если вообще).

Когда этот первый поток входит в режим guile, глобальное состояние Guile
инициализируется перед вызовом @code{func}.

Функция @var{func} вызывается через
@code{scm_with_continuation_barrier}; таким образом, @code{scm_with_guile}
возвращается ровно один раз.

Когда @code{scm_with_guile} возвращается, поток больше не находиться в режиме guile
(кроме случаев, когда @code{scm_with_guile} был вызван из режима guile, см выше).
Таким образом, только @code{func} может хранить @code{SCM} переменные в стеке и
быть уверенным что они защищены от сборщика мусора.
См. @code{scm_init_guile} для другого подхода к инициализации Guile,
который не имеет данных ограничений.

Это хорошо вызвать @code{scm_with_guile}, когда поток временно вышел из 
режима guile использовав @code{scm_without_guile}.  Затем он просто опять 
временно войдет в режим guile.
@end deftypefn

@deftypefn {C Function} void scm_init_guile ()
Организует вещи так, чтобы весь код в текущем потоке выполнялся как будто 
внутри вызова @code{scm_with_guile}.  То есть все функции вызываемые текущим
потоком, могут полагать что значения @code{SCM} в их кадрах стека защищены
от сборщика мусора (за исключением случаев, когда поток явно вышел из режима
guile, коченчно).

Когда @code{scm_init_guile} вызывается из потока, который уже находиться в
одном режиме guile, ничего не происходит.  Такое поведение имеет значение,
когда вы вызываете  @code{scm_init_guile} в то время когда поток только
временно вышел из режима guile: в этом случае поток не будет в режиме guile
после возврата @code{scm_init_guile}.  Таким образом, вы не должны использовать
@code{scm_init_guile} по такому сценарию.

Когда в потоке, переведенном в режим guile @code{scm_init_guile}, происходит
непрехваченное исключение, печатается короткое сообщение в текущий порт ошибки и
поток завершается с помощью @code{scm_pthread_exit
(NULL)}.  На продолжения не накладывается никаких ограничений.

Функция @code{scm_init_guile} может быть недоступной на всех платформах, так как
это требует некоторой магии поиска границ стека, которая могла бы быть перенесена
на все платформы, на которых работает Guile.  Таким образом, если вы можете, лучше
использовать @code{scm_with_guile} или его вариант @code{scm_boot_guile} вместо
этой функции.
@end deftypefn

@deftypefn {C Function} void scm_boot_guile (int @var{argc}, char **@var{argv}, void (*@var{main_func}) (void *@var{data}, int @var{argc}, char **@var{argv}), void *@var{data})
Входит в режим guile как с @code{scm_with_guile} и вызывает @var{main_func},
передавая ей @var{data}, @var{argc}, и @var{argv} как указано.  Когда
@var{main_func} возвращается, @code{scm_boot_guile} вызывает @code{exit (0)};
@code{scm_boot_guile} никогда не возвращается.  Если вам нужно другое значение
выхода, используйте в @var{main_func} вызов @code{exit} сами.  Если вы не хотите выходить
вообще, используйте @code{scm_with_guile} вместо @code{scm_boot_guile}.

Функция @code{scm_boot_guile} организует для функции @code{command-line} Scheme
возврат строк переданных с помощью @var{argc} и @var{argv}.  Если @var{main_func}
изменяет @var{argc} или @var{argv}, она должна вызвать @code{scm_set_program_arguments} 
с окончательным списком, чтобы код Scheme узнал, какие аргументы необходимо обработать.
(@pxref{Runtime Environment}).
@end deftypefn

@deftypefn {C Function} void scm_shell (int @var{argc}, char **@var{argv})
Обрабатывает аргументы командной строки в манере исполняемого файла @code{guile}.
Это включет загрузку обычных файлов инициализации Guile, взаимодействие с 
пользователем или запуск любых сценариев или выражений, заданных параметрами
@code{-s} или @code{-e}, и затем выход.
@xref{Invoking Guile}, для более подробной информации.

Поскольку эта фунция не возвращается, вы должны выполнить всю инициализацию
для конкретного приложения перед вызовом этой функции.
@end deftypefn