#
# Gagin <mikhail-gagin@yandex.ru>, 2018.
#
#. extracted from /home/bear/work/guile/doc/guile/en/intro.texi
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-07 12:37+0300\n"
"PO-Revision-Date: 2018-05-10 08:00+0300\n"
"Last-Translator: Gagin <mikhail-gagin@yandex.ru>\n"
"Language-Team: Russian <mikhail-gagin@yandex.ru>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: /home/bear/work/guile/doc/guile/en/intro.texi:6
msgid ""
"@c -*-texinfo-*-\n"
"@c This is part of the GNU Guile Reference Manual.\n"
"@c Copyright (C)  1996, 1997, 2000, 2001, 2002, 2003, 2004, 2006, 2010, "
"2011, 2013\n"
"@c   Free Software Foundation, Inc.\n"
"@c See the file guile.texi for copying conditions."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:9
msgid ""
"@node Introduction\n"
"@chapter Introduction"
msgstr ""
"@node Introduction\n"
"@chapter Введение"

#: /home/bear/work/guile/doc/guile/en/intro.texi:21
msgid ""
"Guile is an implementation of the Scheme programming language.  Scheme\n"
"(@url{http://schemers.org/}) is an elegant and conceptually simple\n"
"dialect of Lisp, originated by Guy Steele and Gerald Sussman, and since\n"
"evolved by the series of reports known as RnRS (the\n"
"@tex\n"
"Revised$^n$\n"
"@end tex\n"
"@ifnottex\n"
"Revised^n\n"
"@end ifnottex\n"
"Reports on Scheme)."
msgstr ""
"Guile - это реализация языка программирования Scheme.  Scheme\n"
"(@url{http://schemers.org/}) - это элегантный и концептуально простой \n"
"диалект  Lisp, созданный  Guy Steele и Gerald Sussman, а также из-за\n"
"серии отчетов известных как RnRS (the\n"
"@tex\n"
"Revised$^n$\n"
"@end tex\n"
"@ifnottex\n"
"Revised^n\n"
"@end ifnottex\n"
"Reports on Scheme)."

#: /home/bear/work/guile/doc/guile/en/intro.texi:27
msgid ""
"Unlike, for example, Python or Perl, Scheme has no benevolent\n"
"dictator.  There are many Scheme implementations, with different\n"
"characteristics and with communities and academic activities around\n"
"them, and the language develops as a result of the interplay between\n"
"these.  Guile's particular characteristics are that"
msgstr ""
"В отличии от, например, Python или Perl, Scheme не имеет доброжелательного\n"
"диктатора.  Здесь очень много реализаций Scheme, с различными "
"характеристиками\n"
"и с сообществами и академическим действиями вокруг них, и язык развивается "
"в \n"
"результате взаимодействия между ними.\n"
"Особенностью Guile является то, что:"

#: /home/bear/work/guile/doc/guile/en/intro.texi:38
msgid ""
"@itemize\n"
"@item\n"
"it is easy to combine with other code written in C\n"
"@item\n"
"it has a historical and continuing connection with the GNU Project\n"
"@item\n"
"it emphasizes interactive and incremental programming\n"
"@item\n"
"it actually supports several languages, not just Scheme.\n"
"@end itemize"
msgstr ""
"@itemize\n"
"@item\n"
"он легко сочектается с другим кодом, написанным на Си\n"
"@item\n"
"он имеет историческую и постоянную связь с проектом GNU\n"
"@item\n"
"он подчеркивает интерактивное и инкрементальное программирование\n"
"@item\n"
"он фактически поддерживает несколько языков, а не только Scheme.\n"
"@end itemize"

#: /home/bear/work/guile/doc/guile/en/intro.texi:43
msgid ""
"@noindent\n"
"The next few sections explain what we mean by these points.  The sections "
"after\n"
"that cover how you can obtain and install Guile, and the typographical\n"
"conventions that we use in this manual."
msgstr ""
"@noindent\n"
"Следующие несколько разделов объясняют, что мы подразумеваем под этими "
"пунктами.\n"
"После этого раздела идет информация о том как в может получить и установить "
"Guile,\n"
"и типографские соглашения, которые мы используем в этом руководстве."

#: /home/bear/work/guile/doc/guile/en/intro.texi:54
msgid ""
"@menu\n"
"* Guile and Scheme::              \n"
"* Combining with C::              \n"
"* Guile and the GNU Project::\n"
"* Interactive Programming::\n"
"* Supporting Multiple Languages::\n"
"* Obtaining and Installing Guile::  \n"
"* Organisation of this Manual::\n"
"* Typographical Conventions::          \n"
"@end menu"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:57
msgid ""
"@node Guile and Scheme\n"
"@section Guile and Scheme"
msgstr ""
"@node Guile and Scheme\n"
"@section Guile и Scheme"

#: /home/bear/work/guile/doc/guile/en/intro.texi:73
msgid ""
"Guile implements Scheme as described in the\n"
"@tex\n"
"Revised$^5$\n"
"@end tex\n"
"@ifnottex\n"
"Revised^5\n"
"@end ifnottex\n"
"Report on the Algorithmic Language Scheme (usually known as\n"
"@acronym{R5RS}), providing clean and general data and control\n"
"structures.  Guile goes beyond the rather austere language presented\n"
"in @acronym{R5RS}, extending it with a module system, full access to\n"
"@acronym{POSIX} system calls, networking support, multiple threads,\n"
"dynamic linking, a foreign function call interface, powerful string\n"
"processing, and many other features needed for programming in the real\n"
"world."
msgstr ""
"Guile реализует Scheme, как описано в \n"
"@tex\n"
"Revised$^5$\n"
"@end tex\n"
"@ifnottex\n"
"Revised^5\n"
"@end ifnottex\n"
"Report on the Algorithmic Language Scheme (известная как\n"
"@acronym{R5RS}), обеспечивающая чистые и общие данные и структуры\n"
"управления.  Guile выходит за рамки довольно сурового языка,\n"
"представленного в @acronym{R5RS}, расширяя его с помощью модульной\n"
"системы, полного доступа к системным вызовам @acronym{POSIX},\n"
"сетевой поддержки, многопоточности, динамического связывания,\n"
"интерфейса вызова внешних функций, мощной обработкой строк, и\n"
"множества других функций, необходимых для программирования в \n"
"реальном мире."

#: /home/bear/work/guile/doc/guile/en/intro.texi:82
msgid ""
"The Scheme community has recently agreed and published R6RS, the\n"
"latest installment in the RnRS series.  R6RS significantly expands the\n"
"core Scheme language, and standardises many non-core functions that\n"
"implementations---including Guile---have previously done in\n"
"different ways.  Guile has been updated to incorporate some of the\n"
"features of R6RS, and to adjust some existing features to conform to\n"
"the R6RS specification, but it is by no means a complete R6RS\n"
"implementation. @xref{R6RS Support}."
msgstr ""
"Сообщество Scheme недавно приняло и опубликовало R6RS, последнее\n"
"дополнение в серии RnRS.  R6RS значительно расширяет основной язык\n"
"Scheme, и стандартизирует многие неосновные функции, которые \n"
"реализуются, в том числе и в Guile, ранее разными путями. Guile был\n"
"обновлен с учетом некоторых особенностей R6RS, и скорректировал \n"
"некотоыре существующие функции, чтобы соответствовать спецификации\n"
"R6RS, оно это ни коим образом не означает полную реализацию R6RS.\n"
"@xref{R6RS Support}."

#: /home/bear/work/guile/doc/guile/en/intro.texi:87
msgid ""
"Between R5RS and R6RS, the SRFI process (@url{http://srfi.schemers.org/})\n"
"standardised interfaces for many practical needs, such as multithreaded\n"
"programming and multidimensional arrays.  Guile supports many SRFIs, as\n"
"documented in detail in @ref{SRFI Support}."
msgstr ""
"Между R5RS и R6RS, идет процесс SRFI (@url{http://srfi.schemers.org/})\n"
"стандартизации интерфейсов для многих практических задач, таких как\n"
"многопоточное программирование и многомерные массивы.  Guile поддерживает\n"
"множество SRFI, как подробно описано в @ref{SRFI Support}."

#: /home/bear/work/guile/doc/guile/en/intro.texi:91
msgid ""
"In summary, so far as relationship to the Scheme standards is\n"
"concerned, Guile is an R5RS implementation with many extensions, some\n"
"of which conform to SRFIs or to the relevant parts of R6RS."
msgstr ""
"Резюмируя, что касается отношения к стандартам Scheme, то Guile\n"
"является реализацией R5RS со многими расширениями, некоторые из\n"
"которых соответствуют SRFIs или соответствуют части R6RS."

#: /home/bear/work/guile/doc/guile/en/intro.texi:94
msgid ""
"@node Combining with C\n"
"@section Combining with C Code"
msgstr ""
"@node Combining with C\n"
"@section Объединение с Си кодом"

#: /home/bear/work/guile/doc/guile/en/intro.texi:107
msgid ""
"Like a shell, Guile can run interactively---reading expressions from the "
"user,\n"
"evaluating them, and displaying the results---or as a script interpreter,\n"
"reading and executing Scheme code from a file.  Guile also provides an "
"object\n"
"library, @dfn{libguile}, that allows other applications to easily "
"incorporate a\n"
"complete Scheme interpreter.  An application can then use Guile as an "
"extension\n"
"language, a clean and powerful configuration language, or as multi-purpose\n"
"``glue'', connecting primitives provided by the application.  It is easy to "
"call\n"
"Scheme code from C code and vice versa, giving the application designer "
"full\n"
"control of how and when to invoke the interpreter.  Applications can add "
"new\n"
"functions, data types, control structures, and even syntax to Guile, "
"creating a\n"
"domain-specific language tailored to the task at hand, but based on a "
"robust\n"
"language design."
msgstr ""
"Подбно shell, Guile может запускаться интерактивно читая выражения от "
"пользователя,\n"
"производя их вычисления, отоброжать результаты --- или как интерпретатор "
"сценариев,\n"
"читающий и исполняющий код Scheme из файла.  Guile также прдоставляет "
"библиотеку\n"
"объектов @dfn{libguile}, которая позволяет другим приложениям легко вкючать "
"полный\n"
"интерпретатор Scheme.  Затем приложение может использоать Guile как язык "
"расширения,\n"
"чистый и мощный язык настройки, или как многоцелевой ``клей(glue)'', "
"соединяющий \n"
"примитивы, предоставляемые приложением. Код Scheme легко вызывать из кода на "
"Си\n"
"и наоборот, что дает разработчику приложения полный контроль над тем, как и "
"когда \n"
"вызывать интерпретатор. Приложения могут добавлять новые функции, типы "
"данных, \n"
"структуры управления, и даже синтаксис для Guile, создавая специфичный "
"языковой\n"
"домен, адаптированный к задаче, но на основе надежного языкового дизайна."

#: /home/bear/work/guile/doc/guile/en/intro.texi:119
msgid ""
"This kind of combination is helped by four aspects of Guile's design\n"
"and history.  First is that Guile has always been targeted as an\n"
"extension language.  Hence its C API has always been of great\n"
"importance, and has been developed accordingly.  Second and third are\n"
"rather technical points---that Guile uses conservative garbage\n"
"collection, and that it implements the Scheme concept of continuations\n"
"by copying and reinstating the C stack---but whose practical\n"
"consequence is that most existing C code can be glued into Guile as\n"
"is, without needing modifications to cope with strange Scheme\n"
"execution flows.  Last is the module system, which helps extensions to\n"
"coexist without stepping on each others' toes."
msgstr ""
"Этому сочетанию помогают четыре аспекта дизайна и истории Guile.\n"
"Сначала это то что Guile всегда был ориентирован как язык расширения.\n"
"Следовательно его Си API всегда был очень важен и был соответствующим\n"
"образом разработан. Второе и третье, технические моменты --- что  Guile\n"
"использует консервативную сборку мусора и что она реализует концепцию\n"
"Scheme продолжений(continuations) путем копирования и востановления\n"
"стека Си, но чьим практическим последствием является то, что большинство\n"
"существующего Си кода можно склеить в Guile как есть, без небохдимости\n"
"модификации, что бы справиться со странным выполнения  Scheme.\n"
"Последним является модуль системы, который помогает расширениям \n"
"сосуществовать, не мешая друг другу."

#: /home/bear/work/guile/doc/guile/en/intro.texi:128
msgid ""
"Guile's module system allows one to break up a large program into\n"
"manageable sections with well-defined interfaces between them.\n"
"Modules may contain a mixture of interpreted and compiled code; Guile\n"
"can use either static or dynamic linking to incorporate compiled code.\n"
"Modules also encourage developers to package up useful collections of\n"
"routines for general distribution; as of this writing, one can find\n"
"Emacs interfaces, database access routines, compilers, @acronym{GUI}\n"
"toolkit interfaces, and @acronym{HTTP} client functions, among others."
msgstr ""
"Модульная система Guile позволяет разбить большую программу на \n"
"управляемые секции с четко определенными интерфейсами между ними.\n"
"Модули могут содержать смесь интерпретируемого и скомпилированного\n"
"кода; Guile может использовать статическую или динамическую компоновку\n"
"для включения скомпилированного кода. Модули также поощряют разработчиков\n"
"накапливать полезные коллекции подпрограмм для общего распространения; \n"
"на момент написания этой статьи можно найти интерфесы Emacs, подпрограммы\n"
"доступа к базам данных, компиляторы, интерфейсы инстурментария "
"@acronym{GUI}\n"
"и функции клиенты @acronym{HTTP}, среди прочих."

#: /home/bear/work/guile/doc/guile/en/intro.texi:131
msgid ""
"@node Guile and the GNU Project\n"
"@section Guile and the GNU Project"
msgstr ""
"@node Guile and the GNU Project\n"
"@section Guile и проект GNU"

#: /home/bear/work/guile/doc/guile/en/intro.texi:137
msgid ""
"Guile was conceived by the GNU Project following the fantastic success\n"
"of Emacs Lisp as an extension language within Emacs.  Just as Emacs\n"
"Lisp allowed complete and unanticipated applications to be written\n"
"within the Emacs environment, the idea was that Guile should do the\n"
"same for other GNU Project applications.  This remains true today."
msgstr ""
"Guile был задуман проектом GNU после фантастического успеха Emacs \n"
"Lisp в качестве языка расширения Emacs.  Так же, как Emacs\n"
"Lisp допускал завершенные и непредвиденные приложения, которые\n"
"написаны в среде Emacs, идея заключалась в том, что Guile должне\n"
"сделать тоже самое для других приложений проекта GNU.  \n"
"Эта цель остается актуальной и сегодня."

#: /home/bear/work/guile/doc/guile/en/intro.texi:147
msgid ""
"The idea of extensibility is closely related to the GNU project's\n"
"primary goal, that of promoting software freedom.  Software freedom\n"
"means that people receiving a software package can modify or enhance\n"
"it to their own desires, including in ways that may not have occurred\n"
"at all to the software's original developers.  For programs written in\n"
"a compiled language like C, this freedom covers modifying and\n"
"rebuilding the C code; but if the program also provides an extension\n"
"language, that is usually a much friendlier and lower-barrier-of-entry\n"
"way for the user to start making their own changes."
msgstr ""
"Идея расширяемости тесно связана с основной задачей проекта GNU:\n"
"продвижение свободы программного обеспечения. Свобода программного\n"
"обеспечения означает, что люди, получающие программное обеспечение\n"
"могут менять или улучшать его по собственному желанию, в том числе\n"
"способами, о которых даже не подозревали разработчики. Для программ\n"
"написанных и скомпилированных на языках подобных Си, эта свобода\n"
"охватывает модификацию и востановление Си кода, но если программа\n"
"также предоставляет язык расширений, который обычно является гораздо\n"
"более дружественным, он будет более низким барьером, чтобы пользователь\n"
"начал создавать свои собственные изменения."

#: /home/bear/work/guile/doc/guile/en/intro.texi:151
msgid ""
"Guile is now used by GNU project applications such as AutoGen, Lilypond, "
"Denemo,\n"
"Mailutils, TeXmacs and Gnucash, and we hope that there will be many more in\n"
"future."
msgstr ""
"Guile теперь используется проектами GNU, такими как AutoGen, Lilypond, "
"Denemo,\n"
"Mailutils, TeXmacs и Gnucash, и мы надеемся, что в будущем их будет намного\n"
"больше."

#: /home/bear/work/guile/doc/guile/en/intro.texi:154
msgid ""
"@node Interactive Programming\n"
"@section Interactive Programming"
msgstr ""
"@node Interactive Programming\n"
"@section Интерактивное Программирование"

#: /home/bear/work/guile/doc/guile/en/intro.texi:158
msgid ""
"Non-free software has no interest in its users being able to see how it "
"works.\n"
"They are supposed to just accept it, or to report problems and hope that "
"the\n"
"source code owners will choose to work on them."
msgstr ""
"Несвободное программное обеспечение не заинтересовано в том, чтобы "
"пользователи\n"
"могли видиеть, как оно работает. Они должны просто принять его или сообщить "
"о\n"
"проблемах и надеятся, что владельцы исходного кода будут решать их проблему."

#: /home/bear/work/guile/doc/guile/en/intro.texi:163
msgid ""
"Free software aims to work reliably just as much as non-free software does, "
"but\n"
"it should also empower its users by making its workings available.  This is\n"
"useful for many reasons, including education, auditing and enhancements, as "
"well\n"
"as for debugging problems."
msgstr ""
"Свободное программное обеспечение направлено на то, чтобы работать надежно, "
"как\n"
"и несвободное ПО, но оно должно также расширять возможности своих "
"пользвателей,\n"
"делая свою работу доступной.  Это полезно по многим причинам, включая "
"образование,\n"
"аудит и усовершенствования, а также проблемы отладки."

#: /home/bear/work/guile/doc/guile/en/intro.texi:171
msgid ""
"The ideal free software system achieves this by making it easy for "
"interested\n"
"users to see the source code for a feature that they are using, and to "
"follow\n"
"through that source code step-by-step, as it runs.  In Emacs, good examples "
"of\n"
"this are the source code hyperlinks in the help system, and @code{edebug}.\n"
"Then, for bonus points and maximising the ability for the user to "
"experiment\n"
"quickly with code changes, the system should allow parts of the source code "
"to\n"
"be modified and reloaded into the running program, to take immediate effect."
msgstr ""
"Идеальная свободная программная система достигает этого, позволяя "
"заинтересованным\n"
"пользователям видеть исходный код функций, которые они используют, и следить "
"за\n"
"этим исходным кодом шаг за шагом, по мере его выполнения. В Emacs, "
"хорошими \n"
"поимерами этого являются гиперссылки исходного кода в справочной системе и \n"
"@code{edebug}. Затем, в качестве бонуса и максимизации возможностей "
"пользователь\n"
"может провести эксперименты с изменением исходного кода, система должна\n"
"разрешать изменять часть исходного кода и перезагружать эти изменения в \n"
"исходную программу, что бы получить немедленный эффект."

#: /home/bear/work/guile/doc/guile/en/intro.texi:179
msgid ""
"Guile is designed for this kind of interactive programming, and this\n"
"distinguishes it from many Scheme implementations that instead prioritise\n"
"running a fixed Scheme program as fast as possible---because there are\n"
"tradeoffs between performance and the ability to modify parts of an already\n"
"running program.  There are faster Schemes than Guile, but Guile is a GNU\n"
"project and so prioritises the GNU vision of programming freedom and\n"
"experimentation."
msgstr ""
"Guile разработан для такого рода интерактивного программирования, и это\n"
"отличает его от многих реализаций Scheme, которые запускают фиксированную\n"
"программу Scheme как можно быстрее --- потому что есть компромисс между\n"
"производительностью и способностью изменить части уже запущенной программы.\n"
"Есть более быстрые Schemes чем Guile, но Guile это проект GNU,\n"
"поэтому он ставит приоритет в отношении концепции свободы программирования\n"
"и эксперементирования."

#: /home/bear/work/guile/doc/guile/en/intro.texi:182
msgid ""
"@node Supporting Multiple Languages\n"
"@section Supporting Multiple Languages"
msgstr ""
"@node Supporting Multiple Languages\n"
"@section Поддержка множества языков"

#: /home/bear/work/guile/doc/guile/en/intro.texi:188
msgid ""
"Since the 2.0 release, Guile's architecture supports compiling any language "
"to\n"
"its core virtual machine bytecode, and Scheme is just one of the supported\n"
"languages.  Other supported languages are Emacs Lisp, ECMAScript (commonly "
"known\n"
"as Javascript) and Brainfuck, and work is under discussion for Lua, Ruby "
"and\n"
"Python."
msgstr ""
"Начиная с версии 2.0 архитектура Guile поддерживает компиляцию любого языка\n"
"в его основной виртуальный машинный байт-код, а Scheme это только один из\n"
"поддерживаемых языков. Другими поддерживаемыми языками являются Emacs "
"Lisp, \n"
"ECMAScript (обычно известный как Javascript) и Brainfuck, и ведется\n"
"обсуждение для Lua, Ruby и Python."

#: /home/bear/work/guile/doc/guile/en/intro.texi:192
msgid ""
"This means that users can program applications which use Guile in the "
"language\n"
"of their choice, rather than having the tastes of the application's author\n"
"imposed on them."
msgstr ""
"Это означает, что пользователи могут программировать в приложениях, которые\n"
"используют Guile выбирая свой язык, а не язык навязываемый им автором\n"
"приложения."

#: /home/bear/work/guile/doc/guile/en/intro.texi:195
msgid ""
"@node Obtaining and Installing Guile\n"
"@section Obtaining and Installing Guile"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:200
msgid ""
"Guile can be obtained from the main GNU archive site\n"
"@url{ftp://ftp.gnu.org} or any of its mirrors.  The file will be named\n"
"guile-@var{version}.tar.gz.  The current version is @value{VERSION}, so the\n"
"file you should grab is:"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:202
msgid "@url{ftp://ftp.gnu.org/gnu/guile/guile-@value{VERSION}.tar.gz}"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:204
msgid "To unbundle Guile use the instruction"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:208
msgid ""
"@example\n"
"zcat guile-@value{VERSION}.tar.gz | tar xvf -\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:214
msgid ""
"@noindent\n"
"which will create a directory called @file{guile-@value{VERSION}} with\n"
"all the sources.  You can look at the file @file{INSTALL} for detailed\n"
"instructions on how to build and install Guile, but you should be able\n"
"to just do"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:221
msgid ""
"@example\n"
"cd guile-@value{VERSION}\n"
"./configure\n"
"make\n"
"make install\n"
"@end example"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:225
msgid ""
"This will install the Guile executable @file{guile}, the Guile library\n"
"@file{libguile} and various associated header files and support libraries. "
"It\n"
"will also install the Guile reference manual."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:227
msgid "@c [[include instructions for getting R5RS]]"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:240
msgid ""
"Since this manual frequently refers to the Scheme ``standard'', also\n"
"known as R5RS, or the\n"
"@tex\n"
"``Revised$^5$ Report on the Algorithmic Language Scheme'',\n"
"@end tex\n"
"@ifnottex\n"
"``Revised^5 Report on the Algorithmic Language Scheme'',\n"
"@end ifnottex\n"
"we have included the report in the Guile distribution; see\n"
"@ref{Top, , Introduction, r5rs, Revised(5) Report on the Algorithmic\n"
"Language Scheme}.\n"
"This will also be installed in your info directory."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:243
msgid ""
"@node Organisation of this Manual\n"
"@section Organisation of this Manual"
msgstr ""
"@node Organisation of this Manual\n"
"@section Организация данного Руководства"

#: /home/bear/work/guile/doc/guile/en/intro.texi:245
msgid "The rest of this manual is organised into the following chapters."
msgstr "Остальная часть этого руководства состоит из следующих разделов."

#: /home/bear/work/guile/doc/guile/en/intro.texi:253
msgid ""
"@table @strong\n"
"@item Chapter 2: Hello Guile!\n"
"A whirlwind tour shows how Guile can be used interactively and as\n"
"a script interpreter, how to link Guile into your own applications,\n"
"and how to write modules of interpreted and compiled code for use with\n"
"Guile.  Everything introduced here is documented again and in full by\n"
"the later parts of the manual."
msgstr ""
"@table @strong\n"
"@item Chapter 2: Hello Guile!\n"
"Быстрый тур показывающий, как Guile можно использовать интерактивно и\n"
"как интерпретатор скриптов, как внедрить Guile в ваше приложение и\n"
"как писать модули интерпретируемого и компилируемого кода для использования\n"
"с Guile.  Все рассказанное здесь документируется и полностью описывается в \n"
"последующих частях руководства."

#: /home/bear/work/guile/doc/guile/en/intro.texi:258
msgid ""
"@item Chapter 3: Hello Scheme!\n"
"For readers new to Scheme, this chapter provides an introduction to the "
"basic\n"
"ideas of the Scheme language.  This material would apply to any Scheme\n"
"implementation and so does not make reference to anything Guile-specific."
msgstr ""
"@item Chapter 3: Hello Scheme!\n"
"Для читателей не знакомых со Scheme, данная глава содержит введение в \n"
"идеи языка Scheme.  Данный материал применим к любой реализации Scheme\n"
"и поэтому не ссылается ни на что, что связано со спецификой Guile."

#: /home/bear/work/guile/doc/guile/en/intro.texi:264
msgid ""
"@item Chapter 4: Programming in Scheme\n"
"Provides an overview of programming in Scheme with Guile.  It covers how to\n"
"invoke the @code{guile} program from the command-line and how to write "
"scripts\n"
"in Scheme.  It also introduces the extensions that Guile offers beyond "
"standard\n"
"Scheme."
msgstr ""
"@item Chapter 4: Программирование в Scheme\n"
"Предоставляет обзор программирования на Scheme используя Guile.  В нем "
"рассказывается,\n"
"как вызывать программу @code{guile} из командной строки и как писать скрипты "
"на Scheme.\n"
"В нем также представлены расширения, которые  Guile предлагает за пределами "
"стандартной\n"
"Scheme."

#: /home/bear/work/guile/doc/guile/en/intro.texi:271
msgid ""
"@item Chapter 5: Programming in C\n"
"Provides an overview of how to use Guile in a C program.  It\n"
"discusses the fundamental concepts that you need to understand to\n"
"access the features of Guile, such as dynamic types and the garbage\n"
"collector.  It explains in a tutorial like manner how to define new\n"
"data types and functions for the use by Scheme programs."
msgstr ""
"@item Chapter 5: Programming in C\n"
"Предоставляет обзор того, как использовать Guile в Си программах. В\n"
"нем обсуждаются фундаментальные концепции, которые необходимо понять\n"
"для доступа к функциям Guile, такие как динамические типы и сборщик\n"
"мусора. Это объясняется в учебнике как определить новые типы данных\n"
"и функции для использования в программе Scheme."

#: /home/bear/work/guile/doc/guile/en/intro.texi:276
msgid ""
"@item Chapter 6: Guile API Reference\n"
"This part of the manual documents the Guile @acronym{API} in\n"
"functionality-based groups with the Scheme and C interfaces presented\n"
"side by side."
msgstr ""
"@item Chapter 6: Guile API Reference\n"
"В этой части руководства содержиться описание  @acronym{API} Guile по\n"
"функциональным группам с интерфейсами Scheme и Си, представленными\n"
"бок о бок."

#: /home/bear/work/guile/doc/guile/en/intro.texi:281
msgid ""
"@item Chapter 7: Guile Modules\n"
"Describes some important modules, distributed as part of the Guile\n"
"distribution, that extend the functionality provided by the Guile\n"
"Scheme core."
msgstr ""
"@item Chapter 7: Guile Modules\n"
"Описывыает некоторые важные модули, распространяемые как часть дистрибутива\n"
"Guile, которые расширяют функциональность, предоставляемую ядром Guile "
"Scheme."

#: /home/bear/work/guile/doc/guile/en/intro.texi:285
msgid ""
"@item Chapter 8: GOOPS\n"
"Describes GOOPS, an object oriented extension to Guile that provides\n"
"classes, multiple inheritance and generic functions."
msgstr ""
"@item Chapter 8: GOOPS\n"
"Описывает GOOPS, объектно-ориентированное расширение Guile, которое\n"
"предоставляет классы, множественное наследование и общие функции."

#: /home/bear/work/guile/doc/guile/en/intro.texi:287
msgid "@end table"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:290
msgid ""
"@node Typographical Conventions\n"
"@section Typographical Conventions"
msgstr ""
"@node Typographical Conventions\n"
"@section Типографические соглашения"

#: /home/bear/work/guile/doc/guile/en/intro.texi:294
msgid ""
"In examples and procedure descriptions and all other places where the\n"
"evaluation of Scheme expression is shown, we use some notation for\n"
"denoting the output and evaluation results of expressions."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:297
msgid ""
"The symbol @samp{@result{}} is used to tell which value is returned by\n"
"an evaluation:"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:302
msgid ""
"@lisp\n"
"(+ 1 2)\n"
"@result{} 3\n"
"@end lisp"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:305
msgid ""
"Some procedures produce some output besides returning a value.  This\n"
"is denoted by the symbol @samp{@print{}}."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:311
msgid ""
"@lisp\n"
"(begin (display 1) (newline) 'hooray)\n"
"@print{} 1\n"
"@result{} hooray\n"
"@end lisp"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:315
msgid ""
"As you can see, this code prints @samp{1} (denoted by\n"
"@samp{@print{}}), and returns @code{hooray} (denoted by\n"
"@samp{@result{}})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/intro.texi:319
msgid ""
"@c Local Variables:\n"
"@c TeX-master: \"guile.texi\"\n"
"@c End:"
msgstr ""
