#. extracted from /home/bear/work/guile/doc/guile/en/api-options.texi
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-07 12:36+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 2.2.5\n"

#: /home/bear/work/guile/doc/guile/en/api-options.texi:7
msgid ""
"@c -*-texinfo-*-\n"
"@c This is part of the GNU Guile Reference Manual.\n"
"@c Copyright (C)  1996, 1997, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n"
"@c   2008, 2009, 2010, 2011, 2012, 2013\n"
"@c   Free Software Foundation, Inc.\n"
"@c See the file guile.texi for copying conditions."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:10
msgid ""
"@node Options and Config\n"
"@section Configuration, Features and Runtime Options"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:13
msgid ""
"Why is my Guile different from your Guile?  There are three kinds of\n"
"possible variation:"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:19
msgid ""
"@itemize @bullet\n"
"@item\n"
"build differences --- different versions of the Guile source code,\n"
"installation directories, configuration flags that control pieces of\n"
"functionality being included or left out, etc."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:23
msgid ""
"@item\n"
"differences in dynamically loaded code --- behaviour and features\n"
"provided by modules that can be dynamically loaded into a running Guile"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:28
msgid ""
"@item\n"
"different runtime options --- some of the options that are provided for\n"
"controlling Guile's behaviour may be set differently.\n"
"@end itemize"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:33
msgid ""
"Guile provides ``introspective'' variables and procedures to query all\n"
"of these possible variations at runtime.  For runtime options, it also\n"
"provides procedures to change the settings of options and to obtain\n"
"documentation on what the options mean."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:39
msgid ""
"@menu\n"
"* Build Config::                Build and installation configuration.\n"
"* Feature Tracking::            Available features in the Guile process.\n"
"* Runtime Options::             Controlling Guile's runtime behaviour.\n"
"@end menu"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:43
msgid ""
"@node Build Config\n"
"@subsection Configuration, Build and Installation"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:46
msgid ""
"The following procedures and variables provide information about how\n"
"Guile was configured, built and installed on your system."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:64
msgid ""
"@deffn {Scheme Procedure} version\n"
"@deffnx {Scheme Procedure} effective-version\n"
"@deffnx {Scheme Procedure} major-version\n"
"@deffnx {Scheme Procedure} minor-version\n"
"@deffnx {Scheme Procedure} micro-version\n"
"@deffnx {C Function} scm_version ()\n"
"@deffnx {C Function} scm_effective_version ()\n"
"@deffnx {C Function} scm_major_version ()\n"
"@deffnx {C Function} scm_minor_version ()\n"
"@deffnx {C Function} scm_micro_version ()\n"
"Return a string describing Guile's full version number, effective\n"
"version number, major, minor or micro version number, respectively.\n"
"The @code{effective-version} function returns the version name that\n"
"should remain unchanged during a stable series.  Currently that means\n"
"that it omits the micro version.  The effective version should be used\n"
"for items like the versioned share directory name\n"
"i.e.@: @file{/usr/share/guile/2.2/}"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:73
msgid ""
"@lisp\n"
"(version) @result{} \"2.2.0\"\n"
"(effective-version) @result{} \"2.2\"\n"
"(major-version) @result{} \"2\"\n"
"(minor-version) @result{} \"2\"\n"
"(micro-version) @result{} \"0\"\n"
"@end lisp\n"
"@end deffn"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:80
msgid ""
"@deffn {Scheme Procedure} %package-data-dir\n"
"@deffnx {C Function} scm_sys_package_data_dir ()\n"
"Return the name of the directory under which Guile Scheme files in\n"
"general are stored.  On Unix-like systems, this is usually\n"
"@file{/usr/local/share/guile} or @file{/usr/share/guile}.\n"
"@end deffn"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:88
msgid ""
"@deffn {Scheme Procedure} %library-dir\n"
"@deffnx {C Function} scm_sys_library_dir ()\n"
"Return the name of the directory where the Guile Scheme files that\n"
"belong to the core Guile installation (as opposed to files from a 3rd\n"
"party package) are installed.  On Unix-like systems this is usually\n"
"@file{/usr/local/share/guile/@var{GUILE_EFFECTIVE_VERSION}} or\n"
"@file{/usr/share/guile/@var{GUILE_EFFECTIVE_VERSION}};"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:92
msgid ""
"@noindent\n"
"for example @file{/usr/local/share/guile/2.2}.\n"
"@end deffn"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:99
msgid ""
"@deffn {Scheme Procedure} %site-dir\n"
"@deffnx {C Function} scm_sys_site_dir ()\n"
"Return the name of the directory where Guile Scheme files specific to\n"
"your site should be installed.  On Unix-like systems, this is usually\n"
"@file{/usr/local/share/guile/site} or @file{/usr/share/guile/site}.\n"
"@end deffn"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:106
msgid ""
"@deffn {Scheme Procedure} %site-ccache-dir\n"
"@deffnx {C Function} scm_sys_site_ccache_dir ()\n"
"Return the directory where users should install compiled @code{.go}\n"
"files for use with this version of Guile.  Might look something like\n"
"@file{/usr/lib/guile/@value{EFFECTIVE-VERSION}/site-ccache}.\n"
"@end deffn"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:111
msgid ""
"@defvar %guile-build-info\n"
"Alist of information collected during the building of a particular\n"
"Guile.  Entries can be grouped into one of several categories:\n"
"directories, env vars, and versioning info."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:113
msgid "Briefly, here are the keys in @code{%guile-build-info}, by group:"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:146
msgid ""
"@cindex @code{srcdir}\n"
"@cindex @code{top_srcdir}\n"
"@cindex @code{prefix}\n"
"@cindex @code{exec_prefix}\n"
"@cindex @code{bindir}\n"
"@cindex @code{sbindir}\n"
"@cindex @code{libexecdir}\n"
"@cindex @code{datadir}\n"
"@cindex @code{sysconfdir}\n"
"@cindex @code{sharedstatedir}\n"
"@cindex @code{localstatedir}\n"
"@cindex @code{libdir}\n"
"@cindex @code{infodir}\n"
"@cindex @code{mandir}\n"
"@cindex @code{includedir}\n"
"@cindex @code{pkgdatadir}\n"
"@cindex @code{pkglibdir}\n"
"@cindex @code{pkgincludedir}\n"
"@table @asis\n"
"@item   directories\n"
"srcdir, top_srcdir, prefix, exec_prefix, bindir, sbindir, libexecdir,\n"
"datadir, sysconfdir, sharedstatedir, localstatedir, libdir, infodir,\n"
"mandir, includedir, pkgdatadir, pkglibdir, pkgincludedir\n"
"@cindex @code{LIBS}\n"
"@item   env vars\n"
"LIBS\n"
"@cindex @code{guileversion}\n"
"@cindex @code{libguileinterface}\n"
"@cindex @code{buildstamp}\n"
"@item   versioning info\n"
"guileversion, libguileinterface, buildstamp\n"
"@end table"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:156
msgid ""
"Values are all strings.  The value for @code{LIBS} is typically found\n"
"also as a part of @code{pkg-config --libs\n"
"guile-@value{EFFECTIVE-VERSION}} output.  The value for\n"
"@code{guileversion} has form X.Y.Z, and should be the same as returned\n"
"by @code{(version)}.  The value for @code{libguileinterface} is libtool\n"
"compatible and has form CURRENT:REVISION:AGE (@pxref{Versioning,,\n"
"Library interface versions, libtool, GNU Libtool}).  The value for\n"
"@code{buildstamp} is the output of the command @samp{date -u +'%Y-%m-%d\n"
"%T'} (UTC)."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:161
msgid ""
"In the source, @code{%guile-build-info} is initialized from\n"
"libguile/libpath.h, which is completely generated, so deleting this file\n"
"before a build guarantees up-to-date values for that build.\n"
"@end defvar"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:164
msgid ""
"@cindex GNU triplet\n"
"@cindex canonical host type"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:170
msgid ""
"@defvar %host-type\n"
"The canonical host type (GNU triplet) of the host Guile was configured\n"
"for, e.g., @code{\"x86_64-unknown-linux-gnu\"} (@pxref{Canonicalizing,,,\n"
"autoconf, The GNU Autoconf Manual}).\n"
"@end defvar"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:173
msgid ""
"@node Feature Tracking\n"
"@subsection Feature Tracking"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:178
msgid ""
"Guile has a Scheme level variable @code{*features*} that keeps track to\n"
"some extent of the features that are available in a running Guile.\n"
"@code{*features*} is a list of symbols, for example @code{threads}, each\n"
"of which describes a feature of the running Guile process."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:182
msgid ""
"@defvar *features*\n"
"A list of symbols describing available features of the Guile process.\n"
"@end defvar"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:186
msgid ""
"You shouldn't modify the @code{*features*} variable directly using\n"
"@code{set!}.  Instead, see the procedures that are provided for this\n"
"purpose in the following subsection."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:191
msgid ""
"@menu\n"
"* Feature Manipulation::        Checking for and advertising features.\n"
"* Common Feature Symbols::      Commonly available features.\n"
"@end menu"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:195
msgid ""
"@node Feature Manipulation\n"
"@subsubsection Feature Manipulation"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:198
msgid ""
"To check whether a particular feature is available, use the\n"
"@code{provided?} procedure:"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:204
msgid ""
"@deffn {Scheme Procedure} provided? feature\n"
"@deffnx {Deprecated Scheme Procedure} feature? feature\n"
"Return @code{#t} if the specified @var{feature} is available, otherwise\n"
"@code{#f}.\n"
"@end deffn"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:207
msgid ""
"To advertise a feature from your own Scheme code, you can use the\n"
"@code{provide} procedure:"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:212
msgid ""
"@deffn {Scheme Procedure} provide feature\n"
"Add @var{feature} to the list of available features in this Guile\n"
"process.\n"
"@end deffn"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:215
msgid ""
"For C code, the equivalent function takes its feature name as a\n"
"@code{char *} argument for convenience:"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:220
msgid ""
"@deftypefn {C Function} void scm_add_feature (const char *str)\n"
"Add a symbol with name @var{str} to the list of available features in\n"
"this Guile process.\n"
"@end deftypefn"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:224
msgid ""
"@node Common Feature Symbols\n"
"@subsubsection Common Feature Symbols"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:230
msgid ""
"In general, a particular feature may be available for one of two\n"
"reasons.  Either because the Guile library was configured and compiled\n"
"with that feature enabled --- i.e.@: the feature is built into the library\n"
"on your system.  Or because some C or Scheme code that was dynamically\n"
"loaded by Guile has added that feature to the list."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:233
msgid ""
"In the first category, here are the features that the current version of\n"
"Guile may define (depending on how it is built), and what they mean."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:237
msgid ""
"@table @code\n"
"@item array\n"
"Indicates support for arrays (@pxref{Arrays})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:241
msgid ""
"@item array-for-each\n"
"Indicates availability of @code{array-for-each} and other array mapping\n"
"procedures (@pxref{Arrays})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:245
msgid ""
"@item char-ready?\n"
"Indicates that the @code{char-ready?} function is available\n"
"(@pxref{Venerable Port Interfaces})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:248
msgid ""
"@item complex\n"
"Indicates support for complex numbers."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:252
msgid ""
"@item current-time\n"
"Indicates availability of time-related functions: @code{times},\n"
"@code{get-internal-run-time} and so on (@pxref{Time})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:256
msgid ""
"@item debug-extensions\n"
"Indicates that the debugging evaluator is available, together with the\n"
"options for controlling it."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:259
msgid ""
"@item delay\n"
"Indicates support for promises (@pxref{Delayed Evaluation})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:263
msgid ""
"@item EIDs\n"
"Indicates that the @code{geteuid} and @code{getegid} really return\n"
"effective user and group IDs (@pxref{Processes})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:266
msgid ""
"@item inexact\n"
"Indicates support for inexact numbers."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:273
msgid ""
"@item i/o-extensions\n"
"Indicates availability of the following extended I/O procedures:\n"
"@code{ftell}, @code{redirect-port}, @code{dup->fdes}, @code{dup2},\n"
"@code{fileno}, @code{isatty?}, @code{fdopen},\n"
"@code{primitive-move->fdes} and @code{fdes->ports} (@pxref{Ports and\n"
"File Descriptors})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:280
msgid ""
"@item net-db\n"
"Indicates availability of network database functions:\n"
"@code{scm_gethost}, @code{scm_getnet}, @code{scm_getproto},\n"
"@code{scm_getserv}, @code{scm_sethost}, @code{scm_setnet}, "
"@code{scm_setproto},\n"
"@code{scm_setserv}, and their `byXXX' variants (@pxref{Network\n"
"Databases})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:284
msgid ""
"@item posix\n"
"Indicates support for POSIX functions: @code{pipe}, @code{getgroups},\n"
"@code{kill}, @code{execl} and so on (@pxref{POSIX})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:288
msgid ""
"@item fork\n"
"Indicates support for the POSIX @code{fork} function (@pxref{Processes,\n"
"@code{primitive-fork}})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:292
msgid ""
"@item popen\n"
"Indicates support for @code{open-pipe} in the @code{(ice-9 popen)}\n"
"module (@pxref{Pipes})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:297
msgid ""
"@item random\n"
"Indicates availability of random number generation functions:\n"
"@code{random}, @code{copy-random-state}, @code{random-uniform} and so on\n"
"(@pxref{Random})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:301
msgid ""
"@item reckless\n"
"Indicates that Guile was built with important checks omitted --- you\n"
"should never see this!"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:306
msgid ""
"@item regex\n"
"Indicates support for POSIX regular expressions using\n"
"@code{make-regexp}, @code{regexp-exec} and friends (@pxref{Regexp\n"
"Functions})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:311
msgid ""
"@item socket\n"
"Indicates availability of socket-related functions: @code{socket},\n"
"@code{bind}, @code{connect} and so on (@pxref{Network Sockets and\n"
"Communication})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:315
msgid ""
"@item sort\n"
"Indicates availability of sorting and merging functions\n"
"(@pxref{Sorting})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:319
msgid ""
"@item system\n"
"Indicates that the @code{system} function is available\n"
"(@pxref{Processes})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:322
msgid ""
"@item threads\n"
"Indicates support for multithreading (@pxref{Threads})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:327
msgid ""
"@item values\n"
"Indicates support for multiple return values using @code{values} and\n"
"@code{call-with-values} (@pxref{Multiple Values}).\n"
"@end table"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:331
msgid ""
"Available features in the second category depend, by definition, on what\n"
"additional code your Guile process has loaded in.  The following table\n"
"lists features that you might encounter for this reason."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:335
msgid ""
"@table @code\n"
"@item defmacro\n"
"Indicates that the @code{defmacro} macro is available (@pxref{Macros})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:340
msgid ""
"@item describe\n"
"Indicates that the @code{(oop goops describe)} module has been loaded,\n"
"which provides a procedure for describing the contents of GOOPS\n"
"instances."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:344
msgid ""
"@item readline\n"
"Indicates that Guile has loaded in Readline support, for command line\n"
"editing (@pxref{Readline Support})."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:349
msgid ""
"@item record\n"
"Indicates support for record definition using @code{make-record-type}\n"
"and friends (@pxref{Records}).\n"
"@end table"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:356
msgid ""
"Although these tables may seem exhaustive, it is probably unwise in\n"
"practice to rely on them, as the correspondences between feature symbols\n"
"and available procedures/behaviour are not strictly defined.  If you are\n"
"writing code that needs to check for the existence of some procedure, it\n"
"is probably safer to do so directly using the @code{defined?} procedure\n"
"than to test for the corresponding feature using @code{provided?}."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:360
msgid ""
"@node Runtime Options\n"
"@subsection Runtime Options"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:364
msgid ""
"There are a number of runtime options available for paramaterizing\n"
"built-in procedures, like @code{read}, and built-in behavior, like what\n"
"happens on an uncaught error."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:366
msgid "For more information on reader options, @xref{Scheme Read}."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:368
msgid "For more information on print options, @xref{Scheme Write}."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:371
msgid ""
"Finally, for more information on debugger options, @xref{Debug\n"
"Options}."
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:373
msgid "@subsubsection Examples of option use"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:376
msgid ""
"Here is an example of a session in which some read and debug option\n"
"handling procedures are used.  In this example, the user"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:390
msgid ""
"@enumerate\n"
"@item\n"
"Notices that the symbols @code{abc} and @code{aBc} are not the same\n"
"@item\n"
"Examines the @code{read-options}, and sees that @code{case-insensitive}\n"
"is set to ``no''.\n"
"@item\n"
"Enables @code{case-insensitive}\n"
"@item\n"
"Quits the recursive prompt\n"
"@item\n"
"Verifies that now @code{aBc} and @code{abc} are the same\n"
"@end enumerate"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:416
msgid ""
"@smalllisp\n"
"scheme@@(guile-user)> (define abc \"hello\")\n"
"scheme@@(guile-user)> abc\n"
"$1 = \"hello\"\n"
"scheme@@(guile-user)> aBc\n"
"<unknown-location>: warning: possibly unbound variable `aBc'\n"
"ERROR: In procedure module-lookup:\n"
"ERROR: Unbound variable: aBc\n"
"Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.\n"
"scheme@@(guile-user) [1]> (read-options 'help)\n"
"copy              no    Copy source code expressions.\n"
"positions         yes   Record positions of source code expressions.\n"
"case-insensitive  no    Convert symbols to lower case.\n"
"keywords          #f    Style of keyword recognition: #f, 'prefix or "
"'postfix.\n"
"r6rs-hex-escapes  no    Use R6RS variable-length character and string hex "
"escapes.\n"
"square-brackets   yes   Treat `[' and `]' as parentheses, for R6RS "
"compatibility.\n"
"hungry-eol-escapes no   In strings, consume leading whitespace after an\n"
"                        escaped end-of-line.\n"
"curly-infix       no    Support SRFI-105 curly infix expressions.\n"
"scheme@@(guile-user) [1]> (read-enable 'case-insensitive)\n"
"$2 = (square-brackets keywords #f case-insensitive positions)\n"
"scheme@@(guile-user) [1]> ,q\n"
"scheme@@(guile-user)> aBc\n"
"$3 = \"hello\"\n"
"@end smalllisp"
msgstr ""

#: /home/bear/work/guile/doc/guile/en/api-options.texi:420
msgid ""
"@c Local Variables:\n"
"@c TeX-master: \"guile.texi\"\n"
"@c End:"
msgstr ""
