@deffn {Autoconf Macro} GUILE_PKG [VERSIONS] 

Этот макрос запускает утилиту @code{pkg-config} для поиска файлов разработки
доступной версии Guile.

По умолчанию, этот макрос будет искать последнюю стабильную версию
Guile (например 2.2), возвращаясь назад к предыдущей стабильной версии
(например 2.0) если она доступна.  Если не найден файла guile-@var{VERSION}.pc
сообщается об ошибке.  Найденая версия сохраняется в 
@var{GUILE_EFFECTIVE_VERSION}.

Если @code{GUILE_PROGS} уже был вызван, этот макрос гарантирует, что
файлы разработки будут иметь ту же версию, что и программа Guile.

@var{GUILE_EFFECTIVE_VERSION} помечается для подстановки , как
@code{AC_SUBST}.

@end deffn

@deffn {Autoconf Macro} GUILE_FLAGS

Этот макрос запускает утилиту @code{pkg-config} чтобы найти как 
компилировать и связвать программы с  Guile. Он уставнавливает 
четыре переменных:
@var{GUILE_CFLAGS}, @var{GUILE_LDFLAGS}, @var{GUILE_LIBS}, и
@var{GUILE_LTLIBS}.

@var{GUILE_CFLAGS}: флаги для передачи в C или C++ компилятор для создания кода
использующего заголовочные файлы Guile.  Это почти всегда только один или несколько
флагов @code{-I}.

@var{GUILE_LDFLAGS}: флаги для передачи компилятору, чтобы связать
программу с  Guile.  Они включают в себя @code{-lguile-@var{VERSION}}
для библиотеки Guile, а также может включать один или более флагов
@code{-L}, чтобы сообщить компилятору где искать библиотеки. Но это
не включает флаги, которые влияют на путь поиска библиотек во время
выполнения программы и это может привести к построению программы которая
не запускается, если все необходимые библиотеки не установлены в 
стандартное расположение, такое как @file{/usr/lib}.

@var{GUILE_LIBS} и @var{GUILE_LTLIBS}: флаги для передачи в компилятор или
libtool, соответственно, чтобы связать программу с Guile.  Они включают флаги,
которые расширяют пусть поиска для библиотек во время выполнения, чтобы разделяемые
библиотеки можно было найти в местах где они были во время связывания программы, даже
в нестандартныхъ местах.  @var{GUILE_LIBS} должен быть использован при связывании
программы непосредственно компилятором, тогда как @var{GUILE_LTLIBS} должен быть
использован, когда связывание программы осуществляется через libtool.

Переменные помечаемые для подстановки, как @code{AC_SUBST}.

@end deffn

@deffn {Autoconf Macro} GUILE_SITE_DIR

Этот макрос ищет Guile директорию "site".  Переменная @var{GUILE_SITE} устанавливает
Guile директорию "site" для исходных файлов Scheme (обычно это что-то похожее на
PREFIX/share/guile/site).  @var{GUILE_SITE_CCACHE} будет указывать на каталог для
скомпилированных файлов Scheme также исвестных как файлы @code{.go}
(обычно это что то похожее на PREFIX/lib/guile/@var{GUILE_EFFECTIVE_VERSION}/site-ccache).
@var{GUILE_EXTENSION} будет указывать на каталог для скомпилированных Си расширений
(обычно это что то похожее на PREFIX/lib/guile/@var{GUILE_EFFECTIVE_VERSION}/extensions). 
Последние два устанавливаются пустыми, если конкретная версия  Guile не поддерживает их.
Обратите внимание, что этот макрос будет запускать макросы @code{GUILE_PKG} и
@code{GUILE_PROGS} если они небыли запущены ранее.

Переменные помечаются для подстановки как @code{AC_SUBST}.

@end deffn

@deffn {Autoconf Macro} GUILE_PROGS [VERSION] 

Этот макрос ищет программы @code{guile} и @code{guild}, устанавливая
перменные @var{GUILE} и @var{GUILD} путями к ним, соответственно.
Макрос попытается найти @code{guile} с суффиксом
@code{-X.Y}, а затем ищет его с суффиксом @code{X.Y}, и затем
возвращается к поиску для @code{guile} без суффикса. Если
@code{guile} все еще не найден, выдает сигнал ошибки. Суффикс, если есть,
то что требовалось, чтобы найти @code{guile} будет использован и для @code{guild}.

По умолчанию, этот макрос будет искать последнюю стабильную версию
Guile (например 2.2). x.y или x.y.z версии могут быть указаны. Если найдена
более старая версия, макрос сигнализирует об ошибке.

Эффективная версия найденого @code{guile} устанавливает 
@var{GUILE_EFFECTIVE_VERSION}.  Этот макрос гарантирует, что эффективная
версия совместима с результатом предыдущего вызова
@code{GUILE_FLAGS}, если он был.

Как устаревший интерфейс, он так же ищет  @code{guile-config} и
@code{guile-tools}, устанавливая @var{GUILE_CONFIG} и @var{GUILE_TOOLS}.

Переменные помечаются для подстановки как @code{AC_SUBST}.

@end deffn

@deffn {Autoconf Macro} GUILE_CHECK_RETVAL var check 

@var{var} это имя переменной оболочки(shell), для которой необходимо установить
возвращаемое значение.
@var{check} это выражение Guile Scheme, вычисляемое с "$GUILE -c", и
   возвращающее либо 0 или non-#f чтобы указать что успешность проверки.
   Не-0 число или #f указывают на ошибку.
   Избегайте использования символьного знака "#" поскольку это сбивает с толку
   autoconf.

@end deffn

@deffn {Autoconf Macro} GUILE_MODULE_CHECK var module featuretest description 

@var{var} это имя переменной оболочки(shell), для которой нужно установить "yes" или "no".
@var{module} это список символов, подобных: (ice-9 common-list).
@var{featuretest} это выражение приемлемое для GUILE_CHECK, q.v.
@var{description} описание, это фраза глагола в настоящем времени (передаваемая в AC_MSG_CHECKING).

@end deffn

@deffn {Autoconf Macro} GUILE_MODULE_AVAILABLE var module 

@var{var} это имя перемнной оболочки, для которой надо установить "yes" или "no".
@var{module} это список символов, таких как: (ice-9 common-list).

@end deffn

@deffn {Autoconf Macro} GUILE_MODULE_REQUIRED symlist 

@var{symlist} это список символов, БЕЗ окружающих скобок,
например: ice-9 common-list.

@end deffn

@deffn {Autoconf Macro} GUILE_MODULE_EXPORTS var module modvar 

@var{var} это переменная оболочки которую нужно установить в "yes" или "no".
@var{module} это список симоволов, например: (ice-9 common-list).
@var{modvar} это переменная Guile Scheme для проверки.

@end deffn

@deffn {Autoconf Macro} GUILE_MODULE_REQUIRED_EXPORT module modvar 

@var{module} это список символов, таких как: (ice-9 common-list).
@var{modvar} это переменная Guile Scheme для проверки.

@end deffn